<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Make Hungry</title>
  <subtitle>饥渴难耐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhenyong.site/"/>
  <updated>2016-08-03T05:35:15.000Z</updated>
  <id>http://zhenyong.site/</id>
  
  <author>
    <name>huáng zhèn yǒng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开始折腾 Atom</title>
    <link href="http://zhenyong.site/2016/08/03/starting-atom/"/>
    <id>http://zhenyong.site/2016/08/03/starting-atom/</id>
    <published>2016-08-03T05:05:49.000Z</published>
    <updated>2016-08-03T05:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Atom 是 Github 出品的跨平台编辑器，基于 Electron 开发。我之前是 Sublime 重度使用者，因为 React Native 出了个插件，且只支持 Atom，于是开始折腾 Atom。</p>
<p>从更换主题开始吧…</p>
<a id="more"></a>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>下面是原来 Sublime 使用的界面主题和语法颜色，很高大上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,</div><div class="line">&quot;color_scheme&quot;: &quot;Packages/User/SublimeLinter/Oceanic Next (SL).tmTheme&quot;</div></pre></td></tr></table></figure>
<p>在 Atom 中安装界面主题 <a href="https://atom.io/themes/material-ui" target="_blank" rel="external">material-ui</a> 和语法颜色 <a href="https://atom.io/themes/oceanic-next" target="_blank" rel="external">oceanic-next</a>，文档说的很详细</p>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>使用了上面的主题和颜色后，发现编辑区的背景颜色跟 sublime 用的不一样，因为 Atom 本质上是个 Chrome 浏览，第一个想法就是调出控制台 (alt+cmd+i)，查看这个节点 <code>atom-text-editor</code> 的样式 ，接着按照 <a href="https://atom.io/themes/material-ui" target="_blank" rel="external">material-ui</a> 的文档修改主题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// styles/editor.less</div><div class="line">atom-text-editor &#123;</div><div class="line">	// 注释掉这行就好了</div><div class="line">  // background: @level-3-color;</div><div class="line"></div><div class="line">  &amp;::shadow .line-number &#123;</div><div class="line">    padding-left: 1em;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果擅长前端的童鞋用 Atom 上手会很高效，这玩意就是个浏览器，^_^ ！</p>
<h2 id="插件们"><a href="#插件们" class="headerlink" title="插件们"></a>插件们</h2><p>…</p>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Atom 是 Github 出品的跨平台编辑器，基于 Electron 开发。我之前是 Sublime 重度使用者，因为 React Native 出了个插件，且只支持 Atom，于是开始折腾 Atom。&lt;/p&gt;
&lt;p&gt;从更换主题开始吧…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Atom" scheme="http://zhenyong.site/tags/Atom/"/>
    
      <category term="theme" scheme="http://zhenyong.site/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>Vuex 笔记之 Q &amp; A</title>
    <link href="http://zhenyong.site/2016/07/30/vuex-q-and-a/"/>
    <id>http://zhenyong.site/2016/07/30/vuex-q-and-a/</id>
    <published>2016-07-30T07:16:51.000Z</published>
    <updated>2016-07-30T07:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/vuejs/vuex" target="_blank" rel="external">Vuex</a> 借鉴 Flux 开发思想，帮助你用更好的程序架构开发 Vue.js 应用，主要体现在帮你更好地管理状态。</p>
</blockquote>
<p>通过『提问』和『回答』的方式记录 <a href="http://vuex.vuejs.org/en/index.html" target="_blank" rel="external">文档</a> 笔记：</p>
<a id="more"></a>
<h3 id="数据存储在哪里？"><a href="#数据存储在哪里？" class="headerlink" title="数据存储在哪里？"></a>数据存储在哪里？</h3><p>整个应用的状态数据存储在一个单例 store 中</p>
<h3 id="组件怎么获取状态？"><a href="#组件怎么获取状态？" class="headerlink" title="组件怎么获取状态？"></a>组件怎么获取状态？</h3><p>组件要使用状态（getter of state）则在组件引入 vuex 配置，为每个coputed 变量指定一个 getter 方法，方法的第一个参数总是 state，然后返回你要的</p>
<h3 id="怎么修改状态？"><a href="#怎么修改状态？" class="headerlink" title="怎么修改状态？"></a>怎么修改状态？</h3><p>谨记组件的状态 getter 不要做任何直接修改状态的事情，或者是触发其他有副作用的事件等。想管理状态则触发 mutation，真正给 state 动刀的是在 vuex。<br>每当你需要管理状态时，每个改变都可以定义成一个『命令』，叫 Mutation，通过在 store 中定义『命令』和执行器，要改变状态就通过 sotre 发出这个命令。<br>Mutation 强调同步操作，至于你要对管理状态作出异步的操作就得看看 Action</p>
<h3 id="如何异步修改状态"><a href="#如何异步修改状态" class="headerlink" title="如何异步修改状态?"></a>如何异步修改状态?</h3><p>在组件中 vex 配置相关 action，然后该方法就直接在 vm 下可以访问，方法的实现通常是在异步操作中组合一些 mutation，当然，如果 Action 用在同步场景，你可以把 Actions 理解成用于组合 Mutation 的大 Mutation，另外，action 方法的第一个参数总是 store</p>
<h3 id="简单同步操作用-Mutation-还是-Action？"><a href="#简单同步操作用-Mutation-还是-Action？" class="headerlink" title="简单同步操作用 Mutation 还是 Action？"></a>简单同步操作用 Mutation 还是 Action？</h3><p>从语法来说，你喜欢哪个都行，不过统一开发思路，在组件内，只跟 action 打交道，然后action 里面再去转发 mutation，这样开发体验统一，你也无须访问 store，好维护。官方制定的规则也是只用 action。</p>
<h3 id="怎么处理多模块？"><a href="#怎么处理多模块？" class="headerlink" title="怎么处理多模块？"></a>怎么处理多模块？</h3><p>如果应用简单，mutation、action、state 各自定义一个总文件，如果多模块，那么在每个模块定义各自的 这三个部分，借助 vuex store 的 modules 配置，子模块内开发体验跟原来的没差，也不需要关注它是否为一个子模块。</p>
<h3 id="我想要一些回调的钩子啥的，拦截一些state的处理作分析，有吗？"><a href="#我想要一些回调的钩子啥的，拦截一些state的处理作分析，有吗？" class="headerlink" title="我想要一些回调的钩子啥的，拦截一些state的处理作分析，有吗？"></a>我想要一些回调的钩子啥的，拦截一些state的处理作分析，有吗？</h3><p>store 有 middlewares 配置，让你可以拦截所有 mutation，在开发环境可以使用内置的 logger 中间件，打印 mutation ，而且能获得前后的 state 快照。</p>
<h3 id="如果我不遵循潜规则，然后在vuex-以外修改状态，你管得着吗？"><a href="#如果我不遵循潜规则，然后在vuex-以外修改状态，你管得着吗？" class="headerlink" title="如果我不遵循潜规则，然后在vuex 以外修改状态，你管得着吗？"></a>如果我不遵循潜规则，然后在vuex 以外修改状态，你管得着吗？</h3><p>确实管不着，不过开发阶段可以开启 strict 模式，在 mutation 以外地方修改 state 会报错。</p>
<h3 id="我也想遵循潜规则，但是在表单-input-中用-v-model，双向绑定呀，会在-mutation-以外修改-state-呀，怎么办？"><a href="#我也想遵循潜规则，但是在表单-input-中用-v-model，双向绑定呀，会在-mutation-以外修改-state-呀，怎么办？" class="headerlink" title="我也想遵循潜规则，但是在表单 input 中用 v-model，双向绑定呀，会在 mutation 以外修改 state 呀，怎么办？"></a>我也想遵循潜规则，但是在表单 input 中用 v-model，双向绑定呀，会在 mutation 以外修改 state 呀，怎么办？</h3><p>提供三个思路：</p>
<ol>
<li>不要用 v-model，改用 value 绑定显示，注册 input 事件，手动调用 action 更新</li>
<li>如果小 case，就不要让 veux 跟踪，弄个组件自己状态，继续愉快 v-model，vuex 管不到你的状态</li>
<li>保持 v-model，又让 vuex 管，那你定义一个 computed 的值，getter 你懂的，至于 setter 就调用 action</li>
</ol>
<h3 id="我怎么测试-mutation-和-action"><a href="#我怎么测试-mutation-和-action" class="headerlink" title="我怎么测试 mutation 和 action ?"></a>我怎么测试 mutation 和 action ?</h3><p>mutation 比较好测试，就是同步函数，当做工具方法测呗，自己模拟state开测。至于 action 呢，如果依赖了外部 api 会比较麻烦，借助 web pack 的 inject-loader 对每个依赖的外部方法手动 mock（包括请求的数据），是有点麻烦。</p>
<h3 id="还有什么碉堡的要告诉我？"><a href="#还有什么碉堡的要告诉我？" class="headerlink" title="还有什么碉堡的要告诉我？"></a>还有什么碉堡的要告诉我？</h3><p>mutation 和 action 支持热重载。<a href="http://daily.zhihu.com/story/7277143" target="_blank" rel="external">用 vue 可以当上 CTO</a>。</p>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt; 借鉴 Flux 开发思想，帮助你用更好的程序架构开发 Vue.js 应用，主要体现在帮你更好地管理状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过『提问』和『回答』的方式记录 &lt;a href=&quot;http://vuex.vuejs.org/en/index.html&quot;&gt;文档&lt;/a&gt; 笔记：&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="http://zhenyong.site/categories/tech/"/>
    
    
      <category term="vue" scheme="http://zhenyong.site/tags/vue/"/>
    
      <category term="vuex" scheme="http://zhenyong.site/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>如何跟踪仓库子目录之 subtree 命令</title>
    <link href="http://zhenyong.site/2016/07/20/folk-git-folder/"/>
    <id>http://zhenyong.site/2016/07/20/folk-git-folder/</id>
    <published>2016-07-20T05:35:03.000Z</published>
    <updated>2016-07-20T17:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>想翻译 react 的网站，然后发现 github 仓库中，有关网站部分的源码放在子目录 <code>/docs</code> 下，于是想能否单独 <code>folk</code> 子目录 <code>/docs</code>，而且以后只 <code>pull</code> 这个子目录的更新，于是提交记录就只有该目录下的，我就能专心对比提交然后修改对应翻译。</p>
<a id="more"></a>
<p>通过阅读下列资源</p>
<ul>
<li><a href="http://stackoverflow.com/questions/24577084/forking-a-sub-directory-of-a-repository-on-github-and-making-it-part-of-my-own-r" target="_blank" rel="external">Forking a sub directory … part of my own repo</a></li>
<li><a href="https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository/" target="_blank" rel="external">Using Git subtrees to split a repository</a></li>
<li><a href="https://github.com/apenwarr/git-subtree/blob/master/git-subtree.txt" target="_blank" rel="external">git-subtree/git-subtree.txt</a></li>
</ul>
<p>找到一种奇葩解决方法，下面逐步讲解</p>
<p>假设 <code>react</code> 仓库长这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">react.git (master)</div><div class="line">	|---/others</div><div class="line">	|---/docs</div><div class="line">			|-- a.txt</div><div class="line">			|-- b.txt</div></pre></td></tr></table></figure>
<p>我希望我的仓库长这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">my.git (master)</div><div class="line">	|---/docs</div><div class="line">			|-- a.txt</div><div class="line">			|-- b.txt</div><div class="line">			</div><div class="line">	|---/docs-cn</div><div class="line">			|-- a.txt</div><div class="line">			|-- b.txt</div></pre></td></tr></table></figure>
<p>其中 <code>/docs</code> 保持跟 react 的 <code>/docs</code> 内容一样，而 <code>/docs-cn</code> 则是我翻译新增的内容</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-准备我的仓库"><a href="#1-准备我的仓库" class="headerlink" title="1. 准备我的仓库"></a>1. 准备我的仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:zhenyong/react-website-cn.git</div><div class="line"></div><div class="line">cd react-website-cn</div></pre></td></tr></table></figure>
<h3 id="2-拉取-react-master-分支"><a href="#2-拉取-react-master-分支" class="headerlink" title="2. 拉取 react master 分支"></a>2. 拉取 react master 分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote add react https://github.com/facebook/react.git</div><div class="line"></div><div class="line">git fetch react master:react-master</div></pre></td></tr></table></figure>
<p>自动创建的本地 <code>react-master</code> 分支就相当于 react 库（master分支）</p>
<h3 id="3-分割子目录成新分支"><a href="#3-分割子目录成新分支" class="headerlink" title="3. 分割子目录成新分支"></a>3. 分割子目录成新分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout react-master</div><div class="line">git subtree split --prefix=docs -b react-docs</div><div class="line">git checkout react-docs</div><div class="line">git push origin react-docs</div></pre></td></tr></table></figure>
<p>新的分支 <code>react-docs</code> 包含了 <code>/docs</code> 目录的所有内容，长这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">my.git (react-docs)</div><div class="line">		|-- a.txt</div><div class="line">		|-- b.txt</div></pre></td></tr></table></figure>
<h3 id="4-子目录指向-react-docs-分支"><a href="#4-子目录指向-react-docs-分支" class="headerlink" title="4. 子目录指向 react-docs 分支"></a>4. 子目录指向 <code>react-docs</code> 分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git subtree add --prefix=docs --squash origin react-docs</div></pre></td></tr></table></figure>
<p>在当前分支创建 <code>app</code> 目录，引用 origin react-docs 分支，可以理解成子目录作为一个子仓库，实际上 <code>react-docs</code> 的角色就是中转站</p>
<p>此时，我的 master 分支长这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">my.git (master)</div><div class="line">	|---/docs</div><div class="line">			|-- a.txt</div><div class="line">			|-- b.txt</div></pre></td></tr></table></figure>
<p>之后就可以在 master 增加翻译内容</p>
<h3 id="5-更新-react-docs"><a href="#5-更新-react-docs" class="headerlink" title="5. 更新 react-docs"></a>5. 更新 <code>react-docs</code></h3><p>当 react 内容有更新后，拉取 react 最新内容，重新分割</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git checkout react-master</div><div class="line">git pull react master</div><div class="line"></div><div class="line">git subtree split --prefix=docs --squash \</div><div class="line"> --onto react-docs -b react-docs</div><div class="line"> </div><div class="line"> git checkout react-docs</div><div class="line"> git push origin react-docs</div></pre></td></tr></table></figure>
<p>注意 split 多了一个参数 –onto, 表明再次生成分支时基于原来 <code>react-docs</code> （HEAD）提交记录形成历史纪录</p>
<h3 id="6-我的-master-更新子仓库"><a href="#6-我的-master-更新子仓库" class="headerlink" title="6. 我的 master 更新子仓库"></a>6. 我的 master 更新子仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git subtree pull --prefix=docs --squash origin react-docs</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 <code>react</code> 仓库分离子目录成为新的（中转）仓库，在我的仓库下建立子目录作为子仓库指向中转仓库，从而达到我的 <code>/docs</code> 目录跟踪 <code>react</code> 的<br><code>\docs</code> 目录。</p>
<p>note: 为了演示命令，所以没有设置分支跟踪来简化命令。另外你也可以考虑先 clone react 仓库然后再操作。</p>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想翻译 react 的网站，然后发现 github 仓库中，有关网站部分的源码放在子目录 &lt;code&gt;/docs&lt;/code&gt; 下，于是想能否单独 &lt;code&gt;folk&lt;/code&gt; 子目录 &lt;code&gt;/docs&lt;/code&gt;，而且以后只 &lt;code&gt;pull&lt;/code&gt; 这个子目录的更新，于是提交记录就只有该目录下的，我就能专心对比提交然后修改对应翻译。&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="http://zhenyong.site/categories/tech/"/>
    
    
      <category term="git" scheme="http://zhenyong.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Flow in Vue</title>
    <link href="http://zhenyong.site/2016/07/06/Flow-in-Vue/"/>
    <id>http://zhenyong.site/2016/07/06/Flow-in-Vue/</id>
    <published>2016-07-06T05:07:31.000Z</published>
    <updated>2016-08-02T17:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Facebook 出品的 JS 静态类型检查器</p>
</blockquote>
<p>JS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 <a href="http://www.zhihu.com/question/46397274" target="_blank" rel="external">回答</a></p>
<p><a href="https://flowtype.org/" target="_blank" rel="external">Flow 官网</a></p>
<p><a href="http://zhenyong.site/flowtype">Flow 官网</a>（中文）</p>
<a id="more"></a>
<h2 id="Flow-简单体验"><a href="#Flow-简单体验" class="headerlink" title="Flow 简单体验"></a>Flow 简单体验</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>mac 用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install flow</div></pre></td></tr></table></figure>
<p>然后命令行敲 flow，如果没有反应大概是 brew link 失败了，重新 link 一次就好了</p>
<p>linux 用户通过 npm 安装 <code>flow-bin</code> （全局方便点）</p>
<p>windows 用户目前要使用非官方 build 的版本，<a href="http://www.ocamlpro.com/pub/ocpwin/flow-builds/" target="_blank" rel="external">这里</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目根目录创建 <code>.flowconfig</code> 空白文件，让 flow 知道这个目录下的文件可以用 flow 检测，当然还可以通过这个文件配置一些规则</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>创建一个 <code>hello.js</code>，第一行 <code>/* @flow */</code> 表明这个文件需要检测</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/* @flow */</div><div class="line"></div><div class="line">function foo(x) &#123;</div><div class="line">  return x * 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(&quot;Hello, world!&quot;)</div></pre></td></tr></table></figure>
<p>在跟目录下，执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flow check</div></pre></td></tr></table></figure>
<p>控制台输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">7: foo(&quot;Hello, world!&quot;)</div><div class="line">     ^^^^^^^^^^^^^^^^^^^^ function call</div><div class="line">  4:   return x * 10;</div><div class="line">              ^ string. This type is incompatible with</div><div class="line">  4:   return x * 10;</div><div class="line">              ^^^^^^ number</div></pre></td></tr></table></figure>
<p>这里检测到 <code>foo</code> 方法的参数 <code>x</code> 应该是数字类型，代码中使用了字符串 <code>&quot;Hello, world!&quot;</code> 作为参数就会报错</p>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>基本上 Typescript 你能用到的 Flow 都有，例如指定变量类型、函数返回值类型、自定义对象元类型… 参考 <a href="https://flowtype.org/docs/getting-started.html#_" target="_blank" rel="external">官方文档</a></p>
<h2 id="编辑器实时检测"><a href="#编辑器实时检测" class="headerlink" title="编辑器实时检测"></a>编辑器实时检测</h2><p>通常都不会手动执行命令，结合编辑器实时监测，跟之前介绍的 <code>eslint</code> linter 差不多，sublime 安装</p>
<ul>
<li><code>SublimeLinter</code> <a href="http://sublimelinter.readthedocs.org/en/latest/installation.html" target="_blank" rel="external">安装指南</a></li>
<li><code>SublimeLinter-flow</code><a href="https://github.com/SublimeLinter/SublimeLinter-flow" target="_blank" rel="external">安装指南</a></li>
</ul>
<p>效果：</p>
<p><img src="http://ww1.sinaimg.cn/mw690/68ef88dajw1f5nvq1917aj20bc04a0t0.jpg" alt=""></p>
<h2 id="Flow-in-Vue"><a href="#Flow-in-Vue" class="headerlink" title="Flow in Vue"></a>Flow in Vue</h2><h3 id="flowconfig-配置文件"><a href="#flowconfig-配置文件" class="headerlink" title=".flowconfig 配置文件"></a>.flowconfig 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[ignore]</div><div class="line">.*/node_modules/.*</div><div class="line">.*/test/.*</div><div class="line">.*/build/.*</div><div class="line">.*/examples/.*</div><div class="line">.*/benchmarks/.*</div><div class="line"></div><div class="line">[include]</div><div class="line"></div><div class="line">[libs]</div><div class="line">flow</div><div class="line"></div><div class="line">[options]</div><div class="line">module.name_mapper=&apos;^compiler/\(.*\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/compiler/\1&apos;</div><div class="line">module.name_mapper=&apos;^core/\(.*\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/core/\1&apos;</div><div class="line">module.name_mapper=&apos;^shared/\(.*\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/shared/\1&apos;</div><div class="line">module.name_mapper=&apos;^web/\(.*\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/platforms/web/\1&apos;</div><div class="line">module.name_mapper=&apos;^server/\(.*\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/server/\1&apos;</div><div class="line">module.name_mapper=&apos;^entries/\(.*\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/entries/\1&apos;</div><div class="line">module.name_mapper=&apos;^sfc/\(.*\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/sfc/\1&apos;</div></pre></td></tr></table></figure>
<p>解释下各个配置意思</p>
<ul>
<li><code>ignore</code>：表示该以下匹配到的文件夹都不需要检测</li>
<li><code>include</code>：这里是空白，默认所有文件，如果检测项目根目录以外就要罗列在这里</li>
<li><code>libs</code>: 表示使用目录 /flow 下的接口定义文件</li>
<li><code>options</code>: 第一行配置的效果是，当<code>require(&#39;compiler/xx/yy&#39;)</code> 时把加载路径重定向到 <code>项目路径/src/compiler/xx/yy</code></li>
</ul>
<h3 id="接口类型文件"><a href="#接口类型文件" class="headerlink" title="接口类型文件"></a>接口类型文件</h3><p>回一下 Java 或者其它强类型 OO 语言，当你调用类中没定义的方法时，或者调用方法的参数个数不对时，IDE就会提醒，那么接口类型文件就有点这个意思，让你的类也有这么一个规则文件可以用来校验开发者的代码，举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// /flow/component.js</div><div class="line"></div><div class="line">declare interface Component &#123;</div><div class="line">  // constructor information</div><div class="line">  static cid: number</div><div class="line">	...省略...</div><div class="line">  $data: Object;</div><div class="line">  $options: ComponentOptions;</div><div class="line">...省略...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>Component</code> 是 vue 内部一个类，通过这个接口类型文件表明组件类有哪些成员，哪些静态属性等等，特别要看到 <code>ComponentOptions</code>，这对应到另一个接口类型。</p>
<p>通过这种接口类型，某种意义上，你就有了强类型 OO 语言写代码的一些优点。</p>
<p>当然 vue 的类型文件远不止这用到这点点，更多细节就不一一介绍</p>
<p>语法部分请参照<a href="https://flowtype.org/" target="_blank" rel="external">Flow 官网</a>或者我翻译的<a href="http://zhenyong.site/flowtype">中文网站</a></p>
<p>至于 vue 为什么选用 flow 而不用相对流行的 TypeScript，参考他的知乎回答 <a href="http://www.zhihu.com/question/46397274" target="_blank" rel="external">Vue 2.0 为什么选用 Flow 进行静态代码检查而不是直接使用 TypeScript?</a>。</p>
<p>而我个人也觉得 Flow 有些很实用的场景，例如你无需学习成本，就能用上他的智能检测，解决 null 相关的潜在问题。</p>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Facebook 出品的 JS 静态类型检查器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 &lt;a href=&quot;http://www.zhihu.com/question/46397274&quot;&gt;回答&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://flowtype.org/&quot;&gt;Flow 官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zhenyong.site/flowtype&quot;&gt;Flow 官网&lt;/a&gt;（中文）&lt;/p&gt;
    
    </summary>
    
    
      <category term="flow" scheme="http://zhenyong.site/tags/flow/"/>
    
  </entry>
  
  <entry>
    <title>ESLint in Vue</title>
    <link href="http://zhenyong.site/2016/07/05/ESLint-in-Vue/"/>
    <id>http://zhenyong.site/2016/07/05/ESLint-in-Vue/</id>
    <published>2016-07-05T04:02:35.000Z</published>
    <updated>2016-07-09T11:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>ESLint 一个 JavaScript 代码的静态检测工具</p>
</blockquote>
<a id="more"></a>
<p>相比之前比较流行的 <strong>JSHint</strong>，<strong>ESLint</strong> 扩展性强、配置灵活、支持 ES6 …</p>
<ul>
<li><a href="http://eslint.org/" target="_blank" rel="external">ESLint 官网</a></li>
<li><a href="http://eslint.cn/" target="_blank" rel="external">ESLint 中文</a></li>
</ul>
<p>参考官网安装 eslint 就可以在命令行检测 js 文件的语法错误</p>
<h2 id="编辑器中使用-ESLint"><a href="#编辑器中使用-ESLint" class="headerlink" title="编辑器中使用 ESLint"></a>编辑器中使用 ESLint</h2><p>在实际开发中，更多是配合编辑器（Sublime Text）一起使用，在编写代码的时候使用 eslint 实时检测代码，并且提醒错误的部分，下面展示安装使用过程</p>
<h3 id="1-安装ESLint-Node-模块"><a href="#1-安装ESLint-Node-模块" class="headerlink" title="1. 安装ESLint Node 模块"></a>1. 安装ESLint Node 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g eslint</div></pre></td></tr></table></figure>
<h3 id="2-安装-Sublime-Text-插件"><a href="#2-安装-Sublime-Text-插件" class="headerlink" title="2. 安装 Sublime Text 插件"></a>2. 安装 Sublime Text 插件</h3><ul>
<li><code>SublimeLinter</code> <a href="http://sublimelinter.readthedocs.org/en/latest/installation.html" target="_blank" rel="external">安装指南</a></li>
<li><code>SublimeLinter-contrib-eslint</code> <a href="https://github.com/roadhump/SublimeLinter-eslint#plugin-installation" target="_blank" rel="external">安装指南</a></li>
</ul>
<p><code>SublimeLinter</code> 是一个 <em>代码检测基础框架</em>，当需要具体检测方案则要安装对应的库，例如需要 eslint 监测则安装 <code>SublimeLinter-contrib-eslint</code></p>
<h3 id="3-创建配置文件"><a href="#3-创建配置文件" class="headerlink" title="3. 创建配置文件"></a>3. 创建配置文件</h3><p>在项目根目录下创建 <code>.eslintrc</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;root&quot;: true,</div><div class="line">  &quot;rules&quot;: &#123;</div><div class="line">    &quot;eqeqeq&quot;: &quot;error&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的 <code>&quot;eqeqeq&quot;: &quot;warn&quot;</code> 规则表明，如果代码中出现 <code>==</code> <code>!=</code>来比较则会出现错误提醒，建议使用 <code>===</code> <code>!==</code></p>
<p>这个简单配置只是为了演示，具体参考 </p>
<ul>
<li><a href="http://eslint.org/docs/user-guide/configuring#using-configuration-files" target="_blank" rel="external">配置指南</a></li>
<li><a href="http://eslint.cn/docs/user-guide/configuring#using-configuration-files" target="_blank" rel="external">配置指南（中文）</a></li>
</ul>
<p>这样，写代码的时候就能实时检测错误并且提醒了：</p>
<p><img src="http://ww3.sinaimg.cn/large/68ef88dajw1f5j17wvklzj207802nwef.jpg" alt=""></p>
<h2 id="Vue-的-ESLint"><a href="#Vue-的-ESLint" class="headerlink" title="Vue 的 ESLint"></a>Vue 的 ESLint</h2><h3 id="eslintignore-文件"><a href="#eslintignore-文件" class="headerlink" title=".eslintignore 文件"></a>.eslintignore 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">flow</div><div class="line">dist</div><div class="line">packages</div></pre></td></tr></table></figure>
<p>表明 eslint 检测时，要忽略掉这些目录</p>
<h3 id="eslintrc-文件"><a href="#eslintrc-文件" class="headerlink" title=".eslintrc 文件"></a>.eslintrc 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;root&quot;: true,</div><div class="line">  &quot;parser&quot;: &quot;babel-eslint&quot;,</div><div class="line">  &quot;extends&quot;: &quot;vue&quot;,</div><div class="line">  &quot;plugins&quot;: [&quot;flow-vars&quot;],</div><div class="line">  &quot;rules&quot;: &#123;</div><div class="line">    &quot;flow-vars/define-flow-type&quot;: 1,</div><div class="line">    &quot;flow-vars/use-flow-type&quot;: 1</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面逐个配置解释：</p>
<ul>
<li><code>&quot;root&quot;: true</code></li>
</ul>
<p>对于某个文件使用哪个配置文件，按照以下顺序查找</p>
<ol>
<li>在待检测文件的同一目录查找配置文件</li>
<li>往上逐层父级目录查找，直到发现一个有 <code>&quot;root&quot;: true</code> 的</li>
<li>使用项目根目录配置文件</li>
<li>使用系统全局配置文件</li>
</ol>
<ul>
<li><code>&quot;parser&quot;: &quot;babel-eslint&quot;</code></li>
</ul>
<p>使用非默认的 <code>babel-eslint</code> 作为代码解析器，同时你需要安装相应 node 模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -save-dev babel-eslint</div></pre></td></tr></table></figure>
<p>这样 eslint 就能识别 babel 语法的代码</p>
<ul>
<li><code>&quot;extends&quot;: &quot;vue&quot;</code></li>
</ul>
<p>官方或者第三方提供了一些配置模板，你只需继承则可以使用他们的模板配置，这里继承了 <code>vue</code> 意味着你需要安装 <code>eslint-config-vue</code> 这个 node 模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -save-dev eslint-config-vue</div></pre></td></tr></table></figure>
<ul>
<li><code>&quot;plugins&quot;: [&quot;flow-vars&quot;]</code></li>
</ul>
<p>让 eslint 支持 <code>Flow Script</code> 的全局注解等语法，同时你也要安装对应的 node 模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -save-dev eslint-plugin-flow-vars</div></pre></td></tr></table></figure>
<ul>
<li><code>&quot;rules&quot;:{xx}</code></li>
</ul>
<p>一些主要的配置都在 <code>&quot;extends&quot;: &quot;vue&quot;</code> 解决了，flow 插件部分的配置则在这里另外定义</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 ESLint 保持团队编码风格统一，减少低级错误，真的很赞！</p>
<p>另外推荐 <a href="https://github.com/airbnb/javascript" target="_blank" rel="external"><code>airbnb</code> 的 ES6 编码风格</a>，它有配套的 eslint 模板，很赞</p>
<p>对于英文实在不行的，那就参考 <a href="https://github.com/gf-rd/es6-coding-style" target="_blank" rel="external">ECMAScript6 编码规范–广发证券前端团队</a></p>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ESLint 一个 JavaScript 代码的静态检测工具&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tech" scheme="http://zhenyong.site/categories/tech/"/>
    
    
      <category term="vue" scheme="http://zhenyong.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Babel in Vue</title>
    <link href="http://zhenyong.site/2016/07/04/Babel-in-Vue/"/>
    <id>http://zhenyong.site/2016/07/04/Babel-in-Vue/</id>
    <published>2016-07-04T02:36:26.000Z</published>
    <updated>2016-07-13T08:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Babel 是一个 JavaScript 编译器</p>
</blockquote>
<p>Vue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 <code>Babel</code> 这个工具</p>
<a id="more"></a>
<h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>对照 Babel 的 <a href="https://babeljs.io/" target="_blank" rel="external">官网</a>  首页的指南简单玩一下：</p>
<ul>
<li>安装</li>
</ul>
<p>安装 babel 命令行工具 （官网是在项目下安装，这里全局安装）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g babel-cli</div></pre></td></tr></table></figure>
<p>这样就能在命令行下启动 babel</p>
<p>另外，我们还要告诉 babel 使用哪种转码规则，这里使用 <a href="http://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="external">ES2015 preset</a>。在项目下创建 <code>.babelrc</code> 文件</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后还要安装对应转码规则包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<p>创建 js 代码文件 <code>test.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hello = () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> name = <span class="string">'peter'</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + name)</div><div class="line">&#125;</div><div class="line"></div><div class="line">hello()</div></pre></td></tr></table></figure>
<p>转换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel test.js --out-file test.compiled.js</div></pre></td></tr></table></figure>
<p>生成 <code>test.compiled.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var hello = function hello() &#123;</div><div class="line">  var name = &apos;peter&apos;;</div><div class="line">  console.log(&apos;hello &apos; + name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">hello();</div></pre></td></tr></table></figure>
<p>现在就可以在浏览器运行这段代码了</p>
<p>更多关于 babel 或者 es6 的知识可以参考官网，或者还有下面中文网站：</p>
<ul>
<li><a href="http://www.infoq.com/cn/es6-in-depth/" target="_blank" rel="external">InfoQ 专栏 - 深入浅出 ES6</a></li>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮一峰 - ECMAScript 6 入门</a></li>
</ul>
<h2 id="vue-中使用"><a href="#vue-中使用" class="headerlink" title="vue 中使用"></a>vue 中使用</h2><p>vue 中在构建代码的时候结合 webpack 和 babel 相关插件使用，。。。</p>
<p>//TODO 在 webpack 部分一起写</p>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Babel 是一个 JavaScript 编译器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 &lt;code&gt;Babel&lt;/code&gt; 这个工具&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="http://zhenyong.site/categories/tech/"/>
    
    
      <category term="vue" scheme="http://zhenyong.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>EditorConfig in Vue</title>
    <link href="http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/"/>
    <id>http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/</id>
    <published>2016-07-03T09:23:26.000Z</published>
    <updated>2016-07-05T07:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格</p>
</blockquote>
<a id="more"></a>
<p>某些编辑器使用 EditorConfig 则需要安装对应的插件，Sublime Text 的话就安装 EditorConfig </p>
<p>源码中的配置文件 <code>.editorconfig</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root = true</div><div class="line"></div><div class="line">[*]</div><div class="line">charset = utf-8</div><div class="line">indent_style = space</div><div class="line">indent_size = 2</div><div class="line">end_of_line = lf</div><div class="line">insert_final_newline = true</div><div class="line">trim_trailing_whitespace = true</div></pre></td></tr></table></figure>
<p>解释一下这份配置的意思:</p>
<ul>
<li><code>root = true</code></li>
</ul>
<p>当打开一个文件时，EditorConfig 插件在文件的目录和其每一级父目录查找 .editorconfig 文件，直到有一个配置文件包含 root = true</p>
<p>EditorConfig 配置文件从上往下读取，并且路径最近的文件最后被读取，匹配到的配置按照读取顺序应用在代码上，最接近代码文件的属性优先级最高</p>
<ul>
<li><p><code>[*]</code><br>表示对所有文件文件使用 editorconfig，也可以指定某种文件格式</p>
</li>
<li><p><code>charset = utf-8</code></p>
</li>
</ul>
<p>设置文件编码格式为 utf-8</p>
<ul>
<li><code>indent_style = space</code></li>
</ul>
<p>所有的缩进使用空格，包括 tab 键产生的空白</p>
<ul>
<li><code>indent_size = 2</code></li>
</ul>
<p>设置整数表示规定每级缩进的列数</p>
<ul>
<li><code>end_of_line = lf</code></li>
</ul>
<p>统一设置换行符，不同操作系统默认使用不同的换行符</p>
<p>windows 是 crlf，即 <code>\r\n</code></p>
<p>unix 则是 lf ，即 <code>\n</code></p>
<ul>
<li><code>insert_final_newline = true</code></li>
</ul>
<p>文件都以一个空白行结尾</p>
<ul>
<li><code>trim_trailing_whitespace = true</code></li>
</ul>
<p>除去换行行首的任意空白字符</p>
<hr>
<p>参考：</p>
<ul>
<li><a href="http://editorconfig.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://www.alloyteam.com/2014/12/editor-config/" target="_blank" rel="external">EditorConfig介绍（译）</a></li>
</ul>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tech" scheme="http://zhenyong.site/categories/tech/"/>
    
    
      <category term="vue" scheme="http://zhenyong.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 源码工具链介绍</title>
    <link href="http://zhenyong.site/2016/07/03/Vue-%E6%BA%90%E7%A0%81%E5%B7%A5%E5%85%B7%E9%93%BE%E4%BB%8B%E7%BB%8D/"/>
    <id>http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/</id>
    <published>2016-07-03T08:55:15.000Z</published>
    <updated>2016-07-13T08:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍 Vue 源码中使用到的工具，例如编辑器插件、打包工具、测试工具等等</p>
<p>有部分工具我平时也在用，为了系统地介绍，我也当做小白去学习</p>
<p>本人和小右平常使用的编辑器都是 <a href="https://www.sublimetext.com/3" target="_blank" rel="external">Sublime Text 3</a></p>
<ul>
<li><a href="http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/">EditorConfig</a></li>
<li><a href="http://zhenyong.site/2016/07/04/Babel-in-Vue/">Babel</a></li>
<li><a href="http://zhenyong.site/2016/07/05/ESLint-in-Vue/">ESLint</a></li>
<li><a href="http://zhenyong.site/2016/07/06/Flow-in-Vue/">Flow</a></li>
</ul>
<hr>
<p><strong>CC BY-NC-SA 3.0 CN</strong></p>
<p>本著作采用 <img alt="署名-非商业性使用-相同方式共享 3.0 中国大陆" style="display:inline-block!important;vertical-align: top;" src="/images/cc-by-nc-sa.svg"> <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">署名-非商业性使用-相同方式共享 3.0 中国大陆</a> 进行许可</p>
<p>欢迎转载，但转载请注明来自 <a href="http://zhenyong.site">zhenyong.site</a>，并保持转载后文章内容的完整</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍 Vue 源码中使用到的工具，例如编辑器插件、打包工具、测试工具等等&lt;/p&gt;
&lt;p&gt;有部分工具我平时也在用，为了系统地介绍，我也当做小白去学习&lt;/p&gt;
&lt;p&gt;本人和小右平常使用的编辑器都是 &lt;a href=&quot;https://www.sublimetext.com/3&quot; 
    
    </summary>
    
      <category term="tech" scheme="http://zhenyong.site/categories/tech/"/>
    
    
      <category term="vue" scheme="http://zhenyong.site/tags/vue/"/>
    
  </entry>
  
</feed>
