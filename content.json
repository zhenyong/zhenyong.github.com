{"meta":{"title":"Make Hungry","subtitle":"饥渴难耐","description":null,"author":"huáng zhèn yǒng","url":"http://zhenyong.site"},"pages":[{"title":"about","date":"2016-07-23T08:01:08.000Z","updated":"2016-07-23T08:01:08.000Z","comments":true,"path":"about/index.html","permalink":"http://zhenyong.site/about/index.html","excerpt":"","text":"本文链接：http://zhenyong.site/about/index.html"},{"title":"分类","date":"2016-07-23T08:08:53.000Z","updated":"2016-07-23T08:16:47.000Z","comments":false,"path":"categories/index.html","permalink":"http://zhenyong.site/categories/index.html","excerpt":"","text":"本文链接：http://zhenyong.site/categories/index.html"},{"title":"Docs","date":"2016-07-22T16:10:19.000Z","updated":"2016-07-22T16:10:19.000Z","comments":true,"path":"docs/index.html","permalink":"http://zhenyong.site/docs/index.html","excerpt":"","text":"- React 中文文档- Flow 中文文档"},{"title":"All tags","date":"2016-07-23T07:51:33.000Z","updated":"2016-07-23T07:54:51.000Z","comments":false,"path":"tags/index.html","permalink":"http://zhenyong.site/tags/index.html","excerpt":"","text":"本文链接：http://zhenyong.site/tags/index.html"}],"posts":[{"title":"如何跟踪仓库子目录之 subtree 命令","slug":"folk-git-folder","date":"2016-07-20T05:35:03.000Z","updated":"2016-07-20T17:18:20.000Z","comments":true,"path":"2016/07/20/folk-git-folder/","link":"","permalink":"http://zhenyong.site/2016/07/20/folk-git-folder/","excerpt":"想翻译 react 的网站，然后发现 github 仓库中，有关网站部分的源码放在子目录 /docs 下，于是想能否单独 folk 子目录 /docs，而且以后只 pull 这个子目录的更新，于是提交记录就只有该目录下的，我就能专心对比提交然后修改对应翻译。","text":"想翻译 react 的网站，然后发现 github 仓库中，有关网站部分的源码放在子目录 /docs 下，于是想能否单独 folk 子目录 /docs，而且以后只 pull 这个子目录的更新，于是提交记录就只有该目录下的，我就能专心对比提交然后修改对应翻译。 通过阅读下列资源 Forking a sub directory … part of my own repo Using Git subtrees to split a repository git-subtree/git-subtree.txt 找到一种奇葩解决方法，下面逐步讲解 假设 react 仓库长这样 12345react.git (master) |---/others |---/docs |-- a.txt |-- b.txt 我希望我的仓库长这样： 12345678my.git (master) |---/docs |-- a.txt |-- b.txt |---/docs-cn |-- a.txt |-- b.txt 其中 /docs 保持跟 react 的 /docs 内容一样，而 /docs-cn 则是我翻译新增的内容 步骤1. 准备我的仓库123git clone git@github.com:zhenyong/react-website-cn.gitcd react-website-cn 2. 拉取 react master 分支123git remote add react https://github.com/facebook/react.gitgit fetch react master:react-master 自动创建的本地 react-master 分支就相当于 react 库（master分支） 3. 分割子目录成新分支1234git checkout react-mastergit subtree split --prefix=docs -b react-docsgit checkout react-docsgit push origin react-docs 新的分支 react-docs 包含了 /docs 目录的所有内容，长这样 123my.git (react-docs) |-- a.txt |-- b.txt 4. 子目录指向 react-docs 分支12git checkout mastergit subtree add --prefix=docs --squash origin react-docs 在当前分支创建 app 目录，引用 origin react-docs 分支，可以理解成子目录作为一个子仓库，实际上 react-docs 的角色就是中转站 此时，我的 master 分支长这样 1234my.git (master) |---/docs |-- a.txt |-- b.txt 之后就可以在 master 增加翻译内容 5. 更新 react-docs当 react 内容有更新后，拉取 react 最新内容，重新分割 12345678git checkout react-mastergit pull react mastergit subtree split --prefix=docs --squash \\ --onto react-docs -b react-docs git checkout react-docs git push origin react-docs 注意 split 多了一个参数 –onto, 表明再次生成分支时基于原来 react-docs （HEAD）提交记录形成历史纪录 6. 我的 master 更新子仓库12git checkout mastergit subtree pull --prefix=docs --squash origin react-docs 总结通过 react 仓库分离子目录成为新的（中转）仓库，在我的仓库下建立子目录作为子仓库指向中转仓库，从而达到我的 /docs 目录跟踪 react 的\\docs 目录。 note: 为了演示命令，所以没有设置分支跟踪来简化命令。另外你也可以考虑先 clone react 仓库然后再操作。 .center { text-align: center; } .hidden { display: none; } .donate_bar a.btn_donate{ display: inline-block; width: 82px; height: 82px; background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; -webkit-transition: background 0s; -moz-transition: background 0s; -o-transition: background 0s; -ms-transition: background 0s; transition: background 0s; } .donate_bar a.btn_donate:hover{ background-position: 0px -82px;} .donate_bar .donate_txt { display: block; color: #9d9d9d; font: 14px/2 \"Microsoft Yahei\"; } .donate_bar .fancybox img { max-width: 300px; display: inline-block; } .bold{ font-weight: bold; } 求鼓励，求支持！ &nbsp;&nbsp; 求鼓励，求支持！ document.getElementById('btn_donate').onclick = function() { $('#donate_board').addClass('hidden'); $('#donate_guide').removeClass('hidden'); } function donate_on_web(){ $('#donate').submit(); } var original_window_onload = window.onload; window.onload = function () { var donate_board_wdg; if (original_window_onload) { original_window_onload(); } donate_board_wdg = document.getElementById('donate_board_wdg'); if(donate_board_wdg) { donate_board_wdg.className = 'hidden'; } } CC BY-NC-SA 3.0 CN 本作品采用 署名-非商业性使用-相同方式共享 3.0 中国大陆 进行许可 欢迎转载，但转载请注明来自 zhenyong.site，并保持转载后文章内容的完整 本文链接：http://zhenyong.site/2016/07/20/folk-git-folder/","categories":[{"name":"tech","slug":"tech","permalink":"http://zhenyong.site/categories/tech/"}],"tags":[{"name":"git","slug":"git","permalink":"http://zhenyong.site/tags/git/"}]},{"title":"Flow in Vue","slug":"Flow-in-Vue","date":"2016-07-06T05:07:31.000Z","updated":"2016-07-17T13:54:04.000Z","comments":true,"path":"2016/07/06/Flow-in-Vue/","link":"","permalink":"http://zhenyong.site/2016/07/06/Flow-in-Vue/","excerpt":"Facebook 出品的 JS 静态类型检查器 JS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 回答 Flow 官网 Flow 官网（中文）","text":"Facebook 出品的 JS 静态类型检查器 JS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 回答 Flow 官网 Flow 官网（中文） Flow 简单体验安装mac 用户： 1brew install flow 然后命令行敲 flow，如果没有反应大概是 brew link 失败了，重新 link 一次就好了 linux 用户通过 npm 安装 flow-bin （全局方便点） windows 用户目前要使用非官方 build 的版本，这里 配置在项目根目录创建 .flowconfig 空白文件，让 flow 知道这个目录下的文件可以用 flow 检测，当然还可以通过这个文件配置一些规则 运行创建一个 hello.js，第一行 /* @flow */ 表明这个文件需要检测 1234567/* @flow */function foo(x) &#123; return x * 10;&#125;foo(&quot;Hello, world!&quot;) 在跟目录下，执行命令 1flow check 控制台输出 1234567: foo(&quot;Hello, world!&quot;) ^^^^^^^^^^^^^^^^^^^^ function call 4: return x * 10; ^ string. This type is incompatible with 4: return x * 10; ^^^^^^ number 这里检测到 foo 方法的参数 x 应该是数字类型，代码中使用了字符串 &quot;Hello, world!&quot; 作为参数就会报错 更多基本上 Typescript 你能用到的 Flow 都有，例如指定变量类型、函数返回值类型、自定义对象元类型… 参考 官方文档 编辑器实时检测通常都不会手动执行命令，结合编辑器实时监测，跟之前介绍的 eslint linter 差不多，sublime 安装 SublimeLinter 安装指南 SublimeLinter-flow安装指南 效果： Flow in Vue.flowconfig 配置文件1234567891011121314151617181920[ignore].*/node_modules/.*.*/test/.*.*/build/.*.*/examples/.*.*/benchmarks/.*[include][libs]flow[options]module.name_mapper=&apos;^compiler/\\(.*\\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/compiler/\\1&apos;module.name_mapper=&apos;^core/\\(.*\\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/core/\\1&apos;module.name_mapper=&apos;^shared/\\(.*\\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/shared/\\1&apos;module.name_mapper=&apos;^web/\\(.*\\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/platforms/web/\\1&apos;module.name_mapper=&apos;^server/\\(.*\\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/server/\\1&apos;module.name_mapper=&apos;^entries/\\(.*\\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/entries/\\1&apos;module.name_mapper=&apos;^sfc/\\(.*\\)$&apos; -&gt; &apos;&lt;PROJECT_ROOT&gt;/src/sfc/\\1&apos; 解释下各个配置意思 ignore：表示该以下匹配到的文件夹都不需要检测 include：这里是空白，默认所有文件，如果检测项目根目录以外就要罗列在这里 libs: 表示使用目录 /flow 下的接口定义文件 options: 第一行配置的效果是，当require(&#39;compiler/xx/yy&#39;) 时把加载路径重定向到 项目路径/src/compiler/xx/yy 接口类型文件回一下 Java 或者其它强类型 OO 语言，当你调用类中没定义的方法时，或者调用方法的参数个数不对时，IDE就会提醒，那么接口类型文件就有点这个意思，让你的类也有这么一个规则文件可以用来校验开发者的代码，举个例子： 12345678910// /flow/component.jsdeclare interface Component &#123; // constructor information static cid: number ...省略... $data: Object; $options: ComponentOptions;...省略... &#125; Component 是 vue 内部一个类，通过这个接口类型文件表明组件类有哪些成员，哪些静态属性等等，特别要看到 ComponentOptions，这对应到另一个接口类型。 通过这种接口类型，某种意义上，你就有了强类型 OO 语言写代码的一些优点。 当然 vue 的类型文件远不止这用到这点点，更多细节就不一一介绍 语法部分请参照Flow 官网或者我翻译的中文网站 至于 vue 为什么选用 flow 而不用相对流行的 TypeScript，参考他的知乎回答 Vue 2.0 为什么选用 Flow 进行静态代码检查而不是直接使用 TypeScript?。 而我个人也觉得 Flow 有些很实用的场景，例如你无需学习成本，就能用上他的智能检测，解决 null 相关的潜在问题。 .center { text-align: center; } .hidden { display: none; } .donate_bar a.btn_donate{ display: inline-block; width: 82px; height: 82px; background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; -webkit-transition: background 0s; -moz-transition: background 0s; -o-transition: background 0s; -ms-transition: background 0s; transition: background 0s; } .donate_bar a.btn_donate:hover{ background-position: 0px -82px;} .donate_bar .donate_txt { display: block; color: #9d9d9d; font: 14px/2 \"Microsoft Yahei\"; } .donate_bar .fancybox img { max-width: 300px; display: inline-block; } .bold{ font-weight: bold; } 求鼓励，求支持！ &nbsp;&nbsp; 求鼓励，求支持！ document.getElementById('btn_donate').onclick = function() { $('#donate_board').addClass('hidden'); $('#donate_guide').removeClass('hidden'); } function donate_on_web(){ $('#donate').submit(); } var original_window_onload = window.onload; window.onload = function () { var donate_board_wdg; if (original_window_onload) { original_window_onload(); } donate_board_wdg = document.getElementById('donate_board_wdg'); if(donate_board_wdg) { donate_board_wdg.className = 'hidden'; } } CC BY-NC-SA 3.0 CN 本作品采用 署名-非商业性使用-相同方式共享 3.0 中国大陆 进行许可 欢迎转载，但转载请注明来自 zhenyong.site，并保持转载后文章内容的完整 本文链接：http://zhenyong.site/2016/07/06/Flow-in-Vue/","categories":[],"tags":[]},{"title":"ESLint in Vue","slug":"ESLint-in-Vue","date":"2016-07-05T04:02:35.000Z","updated":"2016-07-09T11:37:41.000Z","comments":true,"path":"2016/07/05/ESLint-in-Vue/","link":"","permalink":"http://zhenyong.site/2016/07/05/ESLint-in-Vue/","excerpt":"ESLint 一个 JavaScript 代码的静态检测工具","text":"ESLint 一个 JavaScript 代码的静态检测工具 相比之前比较流行的 JSHint，ESLint 扩展性强、配置灵活、支持 ES6 … ESLint 官网 ESLint 中文 参考官网安装 eslint 就可以在命令行检测 js 文件的语法错误 编辑器中使用 ESLint在实际开发中，更多是配合编辑器（Sublime Text）一起使用，在编写代码的时候使用 eslint 实时检测代码，并且提醒错误的部分，下面展示安装使用过程 1. 安装ESLint Node 模块1npm install -g eslint 2. 安装 Sublime Text 插件 SublimeLinter 安装指南 SublimeLinter-contrib-eslint 安装指南 SublimeLinter 是一个 代码检测基础框架，当需要具体检测方案则要安装对应的库，例如需要 eslint 监测则安装 SublimeLinter-contrib-eslint 3. 创建配置文件在项目根目录下创建 .eslintrc 文件 123456&#123; &quot;root&quot;: true, &quot;rules&quot;: &#123; &quot;eqeqeq&quot;: &quot;error&quot; &#125;&#125; 其中的 &quot;eqeqeq&quot;: &quot;warn&quot; 规则表明，如果代码中出现 == !=来比较则会出现错误提醒，建议使用 === !== 这个简单配置只是为了演示，具体参考 配置指南 配置指南（中文） 这样，写代码的时候就能实时检测错误并且提醒了： Vue 的 ESLint.eslintignore 文件123flowdistpackages 表明 eslint 检测时，要忽略掉这些目录 .eslintrc 文件12345678910&#123; &quot;root&quot;: true, &quot;parser&quot;: &quot;babel-eslint&quot;, &quot;extends&quot;: &quot;vue&quot;, &quot;plugins&quot;: [&quot;flow-vars&quot;], &quot;rules&quot;: &#123; &quot;flow-vars/define-flow-type&quot;: 1, &quot;flow-vars/use-flow-type&quot;: 1 &#125;&#125; 下面逐个配置解释： &quot;root&quot;: true 对于某个文件使用哪个配置文件，按照以下顺序查找 在待检测文件的同一目录查找配置文件 往上逐层父级目录查找，直到发现一个有 &quot;root&quot;: true 的 使用项目根目录配置文件 使用系统全局配置文件 &quot;parser&quot;: &quot;babel-eslint&quot; 使用非默认的 babel-eslint 作为代码解析器，同时你需要安装相应 node 模块 1npm install -save-dev babel-eslint 这样 eslint 就能识别 babel 语法的代码 &quot;extends&quot;: &quot;vue&quot; 官方或者第三方提供了一些配置模板，你只需继承则可以使用他们的模板配置，这里继承了 vue 意味着你需要安装 eslint-config-vue 这个 node 模块 1npm install -save-dev eslint-config-vue &quot;plugins&quot;: [&quot;flow-vars&quot;] 让 eslint 支持 Flow Script 的全局注解等语法，同时你也要安装对应的 node 模块 1npm install -save-dev eslint-plugin-flow-vars &quot;rules&quot;:{xx} 一些主要的配置都在 &quot;extends&quot;: &quot;vue&quot; 解决了，flow 插件部分的配置则在这里另外定义 总结使用 ESLint 保持团队编码风格统一，减少低级错误，真的很赞！ 另外推荐 airbnb 的 ES6 编码风格，它有配套的 eslint 模板，很赞 对于英文实在不行的，那就参考 ECMAScript6 编码规范–广发证券前端团队 .center { text-align: center; } .hidden { display: none; } .donate_bar a.btn_donate{ display: inline-block; width: 82px; height: 82px; background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; -webkit-transition: background 0s; -moz-transition: background 0s; -o-transition: background 0s; -ms-transition: background 0s; transition: background 0s; } .donate_bar a.btn_donate:hover{ background-position: 0px -82px;} .donate_bar .donate_txt { display: block; color: #9d9d9d; font: 14px/2 \"Microsoft Yahei\"; } .donate_bar .fancybox img { max-width: 300px; display: inline-block; } .bold{ font-weight: bold; } 求鼓励，求支持！ &nbsp;&nbsp; 求鼓励，求支持！ document.getElementById('btn_donate').onclick = function() { $('#donate_board').addClass('hidden'); $('#donate_guide').removeClass('hidden'); } function donate_on_web(){ $('#donate').submit(); } var original_window_onload = window.onload; window.onload = function () { var donate_board_wdg; if (original_window_onload) { original_window_onload(); } donate_board_wdg = document.getElementById('donate_board_wdg'); if(donate_board_wdg) { donate_board_wdg.className = 'hidden'; } } CC BY-NC-SA 3.0 CN 本作品采用 署名-非商业性使用-相同方式共享 3.0 中国大陆 进行许可 欢迎转载，但转载请注明来自 zhenyong.site，并保持转载后文章内容的完整 本文链接：http://zhenyong.site/2016/07/05/ESLint-in-Vue/","categories":[{"name":"tech","slug":"tech","permalink":"http://zhenyong.site/categories/tech/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://zhenyong.site/tags/vue/"}]},{"title":"Babel in Vue","slug":"Babel-in-Vue","date":"2016-07-04T02:36:26.000Z","updated":"2016-07-13T08:45:36.000Z","comments":true,"path":"2016/07/04/Babel-in-Vue/","link":"","permalink":"http://zhenyong.site/2016/07/04/Babel-in-Vue/","excerpt":"Babel 是一个 JavaScript 编译器 Vue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 Babel 这个工具","text":"Babel 是一个 JavaScript 编译器 Vue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 Babel 这个工具 简单例子对照 Babel 的 官网 首页的指南简单玩一下： 安装 安装 babel 命令行工具 （官网是在项目下安装，这里全局安装） 1npm install -g babel-cli 这样就能在命令行下启动 babel 另外，我们还要告诉 babel 使用哪种转码规则，这里使用 ES2015 preset。在项目下创建 .babelrc 文件 123&#123; \"presets\": [\"es2015\"]&#125; 然后还要安装对应转码规则包 1npm install --save-dev babel-preset-es2015 测试 创建 js 代码文件 test.js： 123456var hello = () =&gt; &#123; let name = 'peter' console.log('hello ' + name)&#125;hello() 转换： 1babel test.js --out-file test.compiled.js 生成 test.compiled.js 12345678&apos;use strict&apos;;var hello = function hello() &#123; var name = &apos;peter&apos;; console.log(&apos;hello &apos; + name);&#125;;hello(); 现在就可以在浏览器运行这段代码了 更多关于 babel 或者 es6 的知识可以参考官网，或者还有下面中文网站： InfoQ 专栏 - 深入浅出 ES6 阮一峰 - ECMAScript 6 入门 vue 中使用vue 中在构建代码的时候结合 webpack 和 babel 相关插件使用，。。。 //TODO 在 webpack 部分一起写 .center { text-align: center; } .hidden { display: none; } .donate_bar a.btn_donate{ display: inline-block; width: 82px; height: 82px; background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; -webkit-transition: background 0s; -moz-transition: background 0s; -o-transition: background 0s; -ms-transition: background 0s; transition: background 0s; } .donate_bar a.btn_donate:hover{ background-position: 0px -82px;} .donate_bar .donate_txt { display: block; color: #9d9d9d; font: 14px/2 \"Microsoft Yahei\"; } .donate_bar .fancybox img { max-width: 300px; display: inline-block; } .bold{ font-weight: bold; } 求鼓励，求支持！ &nbsp;&nbsp; 求鼓励，求支持！ document.getElementById('btn_donate').onclick = function() { $('#donate_board').addClass('hidden'); $('#donate_guide').removeClass('hidden'); } function donate_on_web(){ $('#donate').submit(); } var original_window_onload = window.onload; window.onload = function () { var donate_board_wdg; if (original_window_onload) { original_window_onload(); } donate_board_wdg = document.getElementById('donate_board_wdg'); if(donate_board_wdg) { donate_board_wdg.className = 'hidden'; } } CC BY-NC-SA 3.0 CN 本作品采用 署名-非商业性使用-相同方式共享 3.0 中国大陆 进行许可 欢迎转载，但转载请注明来自 zhenyong.site，并保持转载后文章内容的完整 本文链接：http://zhenyong.site/2016/07/04/Babel-in-Vue/","categories":[{"name":"tech","slug":"tech","permalink":"http://zhenyong.site/categories/tech/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://zhenyong.site/tags/vue/"}]},{"title":"EditorConfig in Vue","slug":"EditorConfig-in-Vue","date":"2016-07-03T09:23:26.000Z","updated":"2016-07-05T07:14:16.000Z","comments":true,"path":"2016/07/03/EditorConfig-in-Vue/","link":"","permalink":"http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/","excerpt":"EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格","text":"EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格 某些编辑器使用 EditorConfig 则需要安装对应的插件，Sublime Text 的话就安装 EditorConfig 源码中的配置文件 .editorconfig 123456789root = true[*]charset = utf-8indent_style = spaceindent_size = 2end_of_line = lfinsert_final_newline = truetrim_trailing_whitespace = true 解释一下这份配置的意思: root = true 当打开一个文件时，EditorConfig 插件在文件的目录和其每一级父目录查找 .editorconfig 文件，直到有一个配置文件包含 root = true EditorConfig 配置文件从上往下读取，并且路径最近的文件最后被读取，匹配到的配置按照读取顺序应用在代码上，最接近代码文件的属性优先级最高 [*]表示对所有文件文件使用 editorconfig，也可以指定某种文件格式 charset = utf-8 设置文件编码格式为 utf-8 indent_style = space 所有的缩进使用空格，包括 tab 键产生的空白 indent_size = 2 设置整数表示规定每级缩进的列数 end_of_line = lf 统一设置换行符，不同操作系统默认使用不同的换行符 windows 是 crlf，即 \\r\\n unix 则是 lf ，即 \\n insert_final_newline = true 文件都以一个空白行结尾 trim_trailing_whitespace = true 除去换行行首的任意空白字符 参考： 官网 EditorConfig介绍（译） .center { text-align: center; } .hidden { display: none; } .donate_bar a.btn_donate{ display: inline-block; width: 82px; height: 82px; background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; -webkit-transition: background 0s; -moz-transition: background 0s; -o-transition: background 0s; -ms-transition: background 0s; transition: background 0s; } .donate_bar a.btn_donate:hover{ background-position: 0px -82px;} .donate_bar .donate_txt { display: block; color: #9d9d9d; font: 14px/2 \"Microsoft Yahei\"; } .donate_bar .fancybox img { max-width: 300px; display: inline-block; } .bold{ font-weight: bold; } 求鼓励，求支持！ &nbsp;&nbsp; 求鼓励，求支持！ document.getElementById('btn_donate').onclick = function() { $('#donate_board').addClass('hidden'); $('#donate_guide').removeClass('hidden'); } function donate_on_web(){ $('#donate').submit(); } var original_window_onload = window.onload; window.onload = function () { var donate_board_wdg; if (original_window_onload) { original_window_onload(); } donate_board_wdg = document.getElementById('donate_board_wdg'); if(donate_board_wdg) { donate_board_wdg.className = 'hidden'; } } CC BY-NC-SA 3.0 CN 本作品采用 署名-非商业性使用-相同方式共享 3.0 中国大陆 进行许可 欢迎转载，但转载请注明来自 zhenyong.site，并保持转载后文章内容的完整 本文链接：http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/","categories":[{"name":"tech","slug":"tech","permalink":"http://zhenyong.site/categories/tech/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://zhenyong.site/tags/vue/"}]},{"title":"Vue 源码工具链介绍","slug":"Vue-源码工具链介绍","date":"2016-07-03T08:55:15.000Z","updated":"2016-07-13T08:50:25.000Z","comments":true,"path":"2016/07/03/Vue-源码工具链介绍/","link":"","permalink":"http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/","excerpt":"","text":"介绍 Vue 源码中使用到的工具，例如编辑器插件、打包工具、测试工具等等 有部分工具我平时也在用，为了系统地介绍，我也当做小白去学习 本人和小右平常使用的编辑器都是 Sublime Text 3 EditorConfig Babel ESLint Flow .center { text-align: center; } .hidden { display: none; } .donate_bar a.btn_donate{ display: inline-block; width: 82px; height: 82px; background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat; -webkit-transition: background 0s; -moz-transition: background 0s; -o-transition: background 0s; -ms-transition: background 0s; transition: background 0s; } .donate_bar a.btn_donate:hover{ background-position: 0px -82px;} .donate_bar .donate_txt { display: block; color: #9d9d9d; font: 14px/2 \"Microsoft Yahei\"; } .donate_bar .fancybox img { max-width: 300px; display: inline-block; } .bold{ font-weight: bold; } 求鼓励，求支持！ &nbsp;&nbsp; 求鼓励，求支持！ document.getElementById('btn_donate').onclick = function() { $('#donate_board').addClass('hidden'); $('#donate_guide').removeClass('hidden'); } function donate_on_web(){ $('#donate').submit(); } var original_window_onload = window.onload; window.onload = function () { var donate_board_wdg; if (original_window_onload) { original_window_onload(); } donate_board_wdg = document.getElementById('donate_board_wdg'); if(donate_board_wdg) { donate_board_wdg.className = 'hidden'; } } CC BY-NC-SA 3.0 CN 本作品采用 署名-非商业性使用-相同方式共享 3.0 中国大陆 进行许可 欢迎转载，但转载请注明来自 zhenyong.site，并保持转载后文章内容的完整 本文链接：http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/","categories":[{"name":"tech","slug":"tech","permalink":"http://zhenyong.site/categories/tech/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://zhenyong.site/tags/vue/"}]}]}