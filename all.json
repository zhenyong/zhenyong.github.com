[{
    "title": "Flow in Vue",
    "date": "2016-07-06T05:07:31.000Z",
    "_content": "\n> Facebook 出品的 JS 静态类型检查器\n\nJS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 [回答](http://www.zhihu.com/question/46397274)\n\n[Flow 官网](https://flowtype.org/)\n\n<!--more-->\n\n## Flow 简单体验\n\n### 安装\n\nmac 用户：\n\n```\nbrew install flow\n```\n\n然后命令行敲 flow，如果没有反应大概是 brew link 失败了，重新 link 一次就好了\n\nlinux 用户通过 npm 安装 `flow-bin` （全局方便点）\n\nwindows 用户目前要使用非官方 build 的版本，[这里](http://www.ocamlpro.com/pub/ocpwin/flow-builds/)\n\n### 配置\n\n在项目根目录创建 `.flowconfig` 空白文件，让 flow 知道这个目录下的文件可以用 flow 检测，当然还可以通过这个文件配置一些规则\n\n### 运行\n\n创建一个 `hello.js`，第一行 `/* @flow */` 表明这个文件需要检测\n\n```\n/* @flow */\n\nfunction foo(x) {\n  return x * 10;\n}\n\nfoo(\"Hello, world!\")\n```\n\n在跟目录下，执行命令\n\n```\nflow check\n```\n\n控制台输出\n\n```\n7: foo(\"Hello, world!\")\n     ^^^^^^^^^^^^^^^^^^^^ function call\n  4:   return x * 10;\n              ^ string. This type is incompatible with\n  4:   return x * 10;\n              ^^^^^^ number\n```\n\n这里检测到 `foo` 方法的参数 `x` 应该是数字类型，代码中使用了字符串 `\"Hello, world!\"` 作为参数就会报错\n\n### 更多\n\n基本上 Typescript 你能用到的 Flow 都有，例如指定变量类型、函数返回值类型、自定义对象元类型...\n\n## 编辑器实时检测\n\n通常都不会手动执行命令，结合编辑器实时监测，跟之前介绍的 `eslint` linter 差不多，sublime 安装\n\n- `SublimeLinter` [安装指南](http://sublimelinter.readthedocs.org/en/latest/installation.html)\n- `SublimeLinter-flow`[安装指南](https://github.com/SublimeLinter/SublimeLinter-flow)\n\n效果：\n\n![](http://ww1.sinaimg.cn/mw690/68ef88dajw1f5nvq1917aj20bc04a0t0.jpg)\n\n## Flow in Vue\n\n// TODO\n",
    "source": "_posts/Flow-in-Vue.md",
    "raw": "---\ntitle: Flow in Vue\ndate: 2016-07-06 13:07:31\ntags:\n---\n\n> Facebook 出品的 JS 静态类型检查器\n\nJS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 [回答](http://www.zhihu.com/question/46397274)\n\n[Flow 官网](https://flowtype.org/)\n\n<!--more-->\n\n## Flow 简单体验\n\n### 安装\n\nmac 用户：\n\n```\nbrew install flow\n```\n\n然后命令行敲 flow，如果没有反应大概是 brew link 失败了，重新 link 一次就好了\n\nlinux 用户通过 npm 安装 `flow-bin` （全局方便点）\n\nwindows 用户目前要使用非官方 build 的版本，[这里](http://www.ocamlpro.com/pub/ocpwin/flow-builds/)\n\n### 配置\n\n在项目根目录创建 `.flowconfig` 空白文件，让 flow 知道这个目录下的文件可以用 flow 检测，当然还可以通过这个文件配置一些规则\n\n### 运行\n\n创建一个 `hello.js`，第一行 `/* @flow */` 表明这个文件需要检测\n\n```\n/* @flow */\n\nfunction foo(x) {\n  return x * 10;\n}\n\nfoo(\"Hello, world!\")\n```\n\n在跟目录下，执行命令\n\n```\nflow check\n```\n\n控制台输出\n\n```\n7: foo(\"Hello, world!\")\n     ^^^^^^^^^^^^^^^^^^^^ function call\n  4:   return x * 10;\n              ^ string. This type is incompatible with\n  4:   return x * 10;\n              ^^^^^^ number\n```\n\n这里检测到 `foo` 方法的参数 `x` 应该是数字类型，代码中使用了字符串 `\"Hello, world!\"` 作为参数就会报错\n\n### 更多\n\n基本上 Typescript 你能用到的 Flow 都有，例如指定变量类型、函数返回值类型、自定义对象元类型...\n\n## 编辑器实时检测\n\n通常都不会手动执行命令，结合编辑器实时监测，跟之前介绍的 `eslint` linter 差不多，sublime 安装\n\n- `SublimeLinter` [安装指南](http://sublimelinter.readthedocs.org/en/latest/installation.html)\n- `SublimeLinter-flow`[安装指南](https://github.com/SublimeLinter/SublimeLinter-flow)\n\n效果：\n\n![](http://ww1.sinaimg.cn/mw690/68ef88dajw1f5nvq1917aj20bc04a0t0.jpg)\n\n## Flow in Vue\n\n// TODO\n",
    "slug": "Flow-in-Vue",
    "published": true,
    "updated": "2016-07-09T11:43:23.000Z",
    "comments": true,
    "layout": "post",
    "photos": [],
    "link": "",
    "_id": "ciqgkdanx0007j6tg59235fmu",
    "content": "<blockquote>\n<p>Facebook 出品的 JS 静态类型检查器</p>\n</blockquote>\n<p>JS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 <a href=\"http://www.zhihu.com/question/46397274\" target=\"_blank\" rel=\"external\">回答</a></p>\n<p><a href=\"https://flowtype.org/\" target=\"_blank\" rel=\"external\">Flow 官网</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Flow-简单体验\"><a href=\"#Flow-简单体验\" class=\"headerlink\" title=\"Flow 简单体验\"></a>Flow 简单体验</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>mac 用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install flow</div></pre></td></tr></table></figure>\n<p>然后命令行敲 flow，如果没有反应大概是 brew link 失败了，重新 link 一次就好了</p>\n<p>linux 用户通过 npm 安装 <code>flow-bin</code> （全局方便点）</p>\n<p>windows 用户目前要使用非官方 build 的版本，<a href=\"http://www.ocamlpro.com/pub/ocpwin/flow-builds/\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>在项目根目录创建 <code>.flowconfig</code> 空白文件，让 flow 知道这个目录下的文件可以用 flow 检测，当然还可以通过这个文件配置一些规则</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>创建一个 <code>hello.js</code>，第一行 <code>/* @flow */</code> 表明这个文件需要检测</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* @flow */</div><div class=\"line\"></div><div class=\"line\">function foo(x) &#123;</div><div class=\"line\">  return x * 10;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo(&quot;Hello, world!&quot;)</div></pre></td></tr></table></figure>\n<p>在跟目录下，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flow check</div></pre></td></tr></table></figure>\n<p>控制台输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">7: foo(&quot;Hello, world!&quot;)</div><div class=\"line\">     ^^^^^^^^^^^^^^^^^^^^ function call</div><div class=\"line\">  4:   return x * 10;</div><div class=\"line\">              ^ string. This type is incompatible with</div><div class=\"line\">  4:   return x * 10;</div><div class=\"line\">              ^^^^^^ number</div></pre></td></tr></table></figure>\n<p>这里检测到 <code>foo</code> 方法的参数 <code>x</code> 应该是数字类型，代码中使用了字符串 <code>&quot;Hello, world!&quot;</code> 作为参数就会报错</p>\n<h3 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p>基本上 Typescript 你能用到的 Flow 都有，例如指定变量类型、函数返回值类型、自定义对象元类型…</p>\n<h2 id=\"编辑器实时检测\"><a href=\"#编辑器实时检测\" class=\"headerlink\" title=\"编辑器实时检测\"></a>编辑器实时检测</h2><p>通常都不会手动执行命令，结合编辑器实时监测，跟之前介绍的 <code>eslint</code> linter 差不多，sublime 安装</p>\n<ul>\n<li><code>SublimeLinter</code> <a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html\" target=\"_blank\" rel=\"external\">安装指南</a></li>\n<li><code>SublimeLinter-flow</code><a href=\"https://github.com/SublimeLinter/SublimeLinter-flow\" target=\"_blank\" rel=\"external\">安装指南</a></li>\n</ul>\n<p>效果：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/68ef88dajw1f5nvq1917aj20bc04a0t0.jpg\" alt=\"\"></p>\n<h2 id=\"Flow-in-Vue\"><a href=\"#Flow-in-Vue\" class=\"headerlink\" title=\"Flow in Vue\"></a>Flow in Vue</h2><p>// TODO<br>\n\n  <!-- css -->\n  <style type=\"text/css\">\n      .center {\n          text-align: center;\n      }\n      .hidden {\n          display: none;\n      }\n    .donate_bar a.btn_donate{\n      display: inline-block;\n      width: 82px;\n      height: 82px;\n      background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      -webkit-transition: background 0s;\n      -moz-transition: background 0s;\n      -o-transition: background 0s;\n      -ms-transition: background 0s;\n      transition: background 0s;\n    }\n\n    .donate_bar a.btn_donate:hover{ background-position: 0px -82px;}\n    .donate_bar .donate_txt {\n      display: block;\n      color: #9d9d9d;\n      font: 14px/2 \"Microsoft Yahei\";\n    }\n    .donate_bar .fancybox img {\n      max-width: 300px;\n      display: inline-block;\n    }\n    .bold{ font-weight: bold; }\n  </style>\n  <!-- /css -->\n  <hr>\n\n    <!-- Donate Module -->\n    <div id=\"donate_module\">\n\n  <!-- btn_donate & tips -->\n  <div id=\"donate_board\" class=\"donate_bar center\">\n      \n    <a id=\"btn_donate\" class=\"btn_donate\" target=\"_self\" href=\"javascript:;\" title=\"Donate 打赏\"></a>\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n      \n    \n  </div>\n  <!-- /btn_donate & tips -->\n\n  <!-- donate guide -->\n  <div id=\"donate_guide\" class=\"donate_bar center hidden\">\n\n    <a class=\"fancybox\" href=\"/images/webchat.jpg\" title=\"用微信扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/webchat.jpg\" title=\"微信打赏 zhenyong\" width=\"auto\"/>\n    </a>\n        \n        &nbsp;&nbsp;\n\n    <a class=\"fancybox\" href=\"/images/alipay.jpg\" title=\"用支付宝扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/alipay.jpg\" title=\"支付宝打赏 zhenyong\" width=\"auto\"/>\n    </a>\n\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n\n  </div>\n  <!-- /donate guide -->\n\n  <!-- donate script -->\n  <script type=\"text/javascript\">\n    document.getElementById('btn_donate').onclick = function() {\n      $('#donate_board').addClass('hidden');\n      $('#donate_guide').removeClass('hidden');\n    }\n\n    function donate_on_web(){\n      $('#donate').submit();\n    }\n\n    var original_window_onload = window.onload;\n    window.onload = function () {\n      var donate_board_wdg;\n      if (original_window_onload) {\n          original_window_onload();\n      }\n      donate_board_wdg = document.getElementById('donate_board_wdg');\n      if(donate_board_wdg) {\n        donate_board_wdg.className = 'hidden';\n      }\n    }\n  </script>\n  <!-- /donate script -->\n</div>\n<!-- /Donate Module -->\n   </p>\n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\"> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\" rel=\"external\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/06/Flow-in-Vue/\">http://zhenyong.site/2016/07/06/Flow-in-Vue/</a></p>\n",
    "excerpt": "<blockquote>\n<p>Facebook 出品的 JS 静态类型检查器</p>\n</blockquote>\n<p>JS 相关的静态检测，一般人都会想到 Typescript， 配合微软的 Code 编辑器，杠杠的，为何 vue 选用 Flow 呢，作者在知乎作了 <a href=\"http://www.zhihu.com/question/46397274\">回答</a></p>\n<p><a href=\"https://flowtype.org/\">Flow 官网</a></p>",
    "more": "<h2 id=\"Flow-简单体验\"><a href=\"#Flow-简单体验\" class=\"headerlink\" title=\"Flow 简单体验\"></a>Flow 简单体验</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>mac 用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install flow</div></pre></td></tr></table></figure>\n<p>然后命令行敲 flow，如果没有反应大概是 brew link 失败了，重新 link 一次就好了</p>\n<p>linux 用户通过 npm 安装 <code>flow-bin</code> （全局方便点）</p>\n<p>windows 用户目前要使用非官方 build 的版本，<a href=\"http://www.ocamlpro.com/pub/ocpwin/flow-builds/\">这里</a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>在项目根目录创建 <code>.flowconfig</code> 空白文件，让 flow 知道这个目录下的文件可以用 flow 检测，当然还可以通过这个文件配置一些规则</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>创建一个 <code>hello.js</code>，第一行 <code>/* @flow */</code> 表明这个文件需要检测</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* @flow */</div><div class=\"line\"></div><div class=\"line\">function foo(x) &#123;</div><div class=\"line\">  return x * 10;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo(&quot;Hello, world!&quot;)</div></pre></td></tr></table></figure>\n<p>在跟目录下，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flow check</div></pre></td></tr></table></figure>\n<p>控制台输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">7: foo(&quot;Hello, world!&quot;)</div><div class=\"line\">     ^^^^^^^^^^^^^^^^^^^^ function call</div><div class=\"line\">  4:   return x * 10;</div><div class=\"line\">              ^ string. This type is incompatible with</div><div class=\"line\">  4:   return x * 10;</div><div class=\"line\">              ^^^^^^ number</div></pre></td></tr></table></figure>\n<p>这里检测到 <code>foo</code> 方法的参数 <code>x</code> 应该是数字类型，代码中使用了字符串 <code>&quot;Hello, world!&quot;</code> 作为参数就会报错</p>\n<h3 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p>基本上 Typescript 你能用到的 Flow 都有，例如指定变量类型、函数返回值类型、自定义对象元类型…</p>\n<h2 id=\"编辑器实时检测\"><a href=\"#编辑器实时检测\" class=\"headerlink\" title=\"编辑器实时检测\"></a>编辑器实时检测</h2><p>通常都不会手动执行命令，结合编辑器实时监测，跟之前介绍的 <code>eslint</code> linter 差不多，sublime 安装</p>\n<ul>\n<li><code>SublimeLinter</code> <a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html\">安装指南</a></li>\n<li><code>SublimeLinter-flow</code><a href=\"https://github.com/SublimeLinter/SublimeLinter-flow\">安装指南</a></li>\n</ul>\n<p>效果：</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/68ef88dajw1f5nvq1917aj20bc04a0t0.jpg\" alt=\"\"></p>\n<h2 id=\"Flow-in-Vue\"><a href=\"#Flow-in-Vue\" class=\"headerlink\" title=\"Flow in Vue\"></a>Flow in Vue</h2><p>// TODO<br><!--donate1468152965244--></p>\n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\" /> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/06/Flow-in-Vue/\">http://zhenyong.site/2016/07/06/Flow-in-Vue/</a></p>",
    "path": "2016/07/06/Flow-in-Vue/",
    "permalink": "http://zhenyong.site/2016/07/06/Flow-in-Vue/",
    "full_source": "/Users/zhenyong/Desktop/ablog/source/_posts/Flow-in-Vue.md",
    "asset_dir": "/Users/zhenyong/Desktop/ablog/source/_posts/Flow-in-Vue/",
    "tags": {
        "data": [],
        "length": 0
    },
    "categories": {
        "data": [],
        "length": 0
    },
    "next": {
        "title": "ESLint in Vue",
        "date": "2016-07-05T04:02:35.000Z",
        "thumbnail": "http://eslint.org/img/logo.svg",
        "_content": "\n> ESLint 一个 JavaScript 代码的静态检测工具\n\n<!--more-->\n\n相比之前比较流行的 **JSHint**，**ESLint** 扩展性强、配置灵活、支持 ES6 ...\n\n- [ESLint 官网](http://eslint.org/)\n- [ESLint 中文](http://eslint.cn/)\n\n参考官网安装 eslint 就可以在命令行检测 js 文件的语法错误\n\n## 编辑器中使用 ESLint\n\n在实际开发中，更多是配合编辑器（Sublime Text）一起使用，在编写代码的时候使用 eslint 实时检测代码，并且提醒错误的部分，下面展示安装使用过程\n\n### 1. 安装ESLint Node 模块\n\n```\nnpm install -g eslint\n```\n\n### 2. 安装 Sublime Text 插件\n\n- `SublimeLinter` [安装指南](http://sublimelinter.readthedocs.org/en/latest/installation.html)\n- `SublimeLinter-contrib-eslint` [安装指南](https://github.com/roadhump/SublimeLinter-eslint#plugin-installation)\n\n`SublimeLinter` 是一个 *代码检测基础框架*，当需要具体检测方案则要安装对应的库，例如需要 eslint 监测则安装 `SublimeLinter-contrib-eslint`\n\n### 3. 创建配置文件\n\n在项目根目录下创建 `.eslintrc` 文件\n\n```\n{\n  \"root\": true,\n  \"rules\": {\n    \"eqeqeq\": \"error\"\n  }\n}\n```\n\n其中的 `\"eqeqeq\": \"warn\"` 规则表明，如果代码中出现 `==` `!=`来比较则会出现错误提醒，建议使用 `===` `!==`\n\n这个简单配置只是为了演示，具体参考 \n\n- [配置指南](http://eslint.org/docs/user-guide/configuring#using-configuration-files)\n- [配置指南（中文）](http://eslint.cn/docs/user-guide/configuring#using-configuration-files)\n\n这样，写代码的时候就能实时检测错误并且提醒了：\n\n![](http://ww3.sinaimg.cn/large/68ef88dajw1f5j17wvklzj207802nwef.jpg)\n\n## Vue 的 ESLint\n\n### .eslintignore 文件\n\n```\nflow\ndist\npackages\n```\n\n表明 eslint 检测时，要忽略掉这些目录\n\n### .eslintrc 文件\n\n```\n{\n  \"root\": true,\n  \"parser\": \"babel-eslint\",\n  \"extends\": \"vue\",\n  \"plugins\": [\"flow-vars\"],\n  \"rules\": {\n    \"flow-vars/define-flow-type\": 1,\n    \"flow-vars/use-flow-type\": 1\n  }\n}\n```\n\n下面逐个配置解释：\n\n- `\"root\": true`\n\n对于某个文件使用哪个配置文件，按照以下顺序查找\n\n1. 在待检测文件的同一目录查找配置文件\n2. 往上逐层父级目录查找，直到发现一个有 `\"root\": true` 的\n3. 使用项目根目录配置文件\n4. 使用系统全局配置文件\n\n- `\"parser\": \"babel-eslint\"`\n\n使用非默认的 `babel-eslint` 作为代码解析器，同时你需要安装相应 node 模块\n\n```\nnpm install -save-dev babel-eslint\n```\n\n这样 eslint 就能识别 babel 语法的代码\n\n\n- `\"extends\": \"vue\"`\n\n官方或者第三方提供了一些配置模板，你只需继承则可以使用他们的模板配置，这里继承了 `vue` 意味着你需要安装 `eslint-config-vue` 这个 node 模块\n\n```\nnpm install -save-dev eslint-config-vue\n```\n\n- `\"plugins\": [\"flow-vars\"]`\n\n让 eslint 支持 `Flow Script` 的全局注解等语法，同时你也要安装对应的 node 模块\n\n```\nnpm install -save-dev eslint-plugin-flow-vars\n```\n\n- `\"rules\":{xx}`\n\n一些主要的配置都在 `\"extends\": \"vue\"` 解决了，flow 插件部分的配置则在这里另外定义\n\n## 总结\n\n使用 ESLint 保持团队编码风格统一，减少低级错误，真的很赞！\n\n另外推荐 [`airbnb` 的 ES6 编码风格](https://github.com/airbnb/javascript)，它有配套的 eslint 模板，很赞\n\n对于英文实在不行的，那就参考 [ECMAScript6 编码规范--广发证券前端团队](https://github.com/gf-rd/es6-coding-style)\n\n\n",
        "source": "_posts/ESLint-in-Vue.md",
        "raw": "---\ntitle: ESLint in Vue\ndate: 2016-07-05 12:02:35\nthumbnail: http://eslint.org/img/logo.svg\ncategories: tech\ntags: [vue]\n---\n\n> ESLint 一个 JavaScript 代码的静态检测工具\n\n<!--more-->\n\n相比之前比较流行的 **JSHint**，**ESLint** 扩展性强、配置灵活、支持 ES6 ...\n\n- [ESLint 官网](http://eslint.org/)\n- [ESLint 中文](http://eslint.cn/)\n\n参考官网安装 eslint 就可以在命令行检测 js 文件的语法错误\n\n## 编辑器中使用 ESLint\n\n在实际开发中，更多是配合编辑器（Sublime Text）一起使用，在编写代码的时候使用 eslint 实时检测代码，并且提醒错误的部分，下面展示安装使用过程\n\n### 1. 安装ESLint Node 模块\n\n```\nnpm install -g eslint\n```\n\n### 2. 安装 Sublime Text 插件\n\n- `SublimeLinter` [安装指南](http://sublimelinter.readthedocs.org/en/latest/installation.html)\n- `SublimeLinter-contrib-eslint` [安装指南](https://github.com/roadhump/SublimeLinter-eslint#plugin-installation)\n\n`SublimeLinter` 是一个 *代码检测基础框架*，当需要具体检测方案则要安装对应的库，例如需要 eslint 监测则安装 `SublimeLinter-contrib-eslint`\n\n### 3. 创建配置文件\n\n在项目根目录下创建 `.eslintrc` 文件\n\n```\n{\n  \"root\": true,\n  \"rules\": {\n    \"eqeqeq\": \"error\"\n  }\n}\n```\n\n其中的 `\"eqeqeq\": \"warn\"` 规则表明，如果代码中出现 `==` `!=`来比较则会出现错误提醒，建议使用 `===` `!==`\n\n这个简单配置只是为了演示，具体参考 \n\n- [配置指南](http://eslint.org/docs/user-guide/configuring#using-configuration-files)\n- [配置指南（中文）](http://eslint.cn/docs/user-guide/configuring#using-configuration-files)\n\n这样，写代码的时候就能实时检测错误并且提醒了：\n\n![](http://ww3.sinaimg.cn/large/68ef88dajw1f5j17wvklzj207802nwef.jpg)\n\n## Vue 的 ESLint\n\n### .eslintignore 文件\n\n```\nflow\ndist\npackages\n```\n\n表明 eslint 检测时，要忽略掉这些目录\n\n### .eslintrc 文件\n\n```\n{\n  \"root\": true,\n  \"parser\": \"babel-eslint\",\n  \"extends\": \"vue\",\n  \"plugins\": [\"flow-vars\"],\n  \"rules\": {\n    \"flow-vars/define-flow-type\": 1,\n    \"flow-vars/use-flow-type\": 1\n  }\n}\n```\n\n下面逐个配置解释：\n\n- `\"root\": true`\n\n对于某个文件使用哪个配置文件，按照以下顺序查找\n\n1. 在待检测文件的同一目录查找配置文件\n2. 往上逐层父级目录查找，直到发现一个有 `\"root\": true` 的\n3. 使用项目根目录配置文件\n4. 使用系统全局配置文件\n\n- `\"parser\": \"babel-eslint\"`\n\n使用非默认的 `babel-eslint` 作为代码解析器，同时你需要安装相应 node 模块\n\n```\nnpm install -save-dev babel-eslint\n```\n\n这样 eslint 就能识别 babel 语法的代码\n\n\n- `\"extends\": \"vue\"`\n\n官方或者第三方提供了一些配置模板，你只需继承则可以使用他们的模板配置，这里继承了 `vue` 意味着你需要安装 `eslint-config-vue` 这个 node 模块\n\n```\nnpm install -save-dev eslint-config-vue\n```\n\n- `\"plugins\": [\"flow-vars\"]`\n\n让 eslint 支持 `Flow Script` 的全局注解等语法，同时你也要安装对应的 node 模块\n\n```\nnpm install -save-dev eslint-plugin-flow-vars\n```\n\n- `\"rules\":{xx}`\n\n一些主要的配置都在 `\"extends\": \"vue\"` 解决了，flow 插件部分的配置则在这里另外定义\n\n## 总结\n\n使用 ESLint 保持团队编码风格统一，减少低级错误，真的很赞！\n\n另外推荐 [`airbnb` 的 ES6 编码风格](https://github.com/airbnb/javascript)，它有配套的 eslint 模板，很赞\n\n对于英文实在不行的，那就参考 [ECMAScript6 编码规范--广发证券前端团队](https://github.com/gf-rd/es6-coding-style)\n\n\n",
        "slug": "ESLint-in-Vue",
        "published": true,
        "updated": "2016-07-09T11:37:41.000Z",
        "comments": true,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ciqgkdanj0002j6tg2jvt9vkd",
        "content": "<blockquote>\n<p>ESLint 一个 JavaScript 代码的静态检测工具</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>相比之前比较流行的 <strong>JSHint</strong>，<strong>ESLint</strong> 扩展性强、配置灵活、支持 ES6 …</p>\n<ul>\n<li><a href=\"http://eslint.org/\" target=\"_blank\" rel=\"external\">ESLint 官网</a></li>\n<li><a href=\"http://eslint.cn/\" target=\"_blank\" rel=\"external\">ESLint 中文</a></li>\n</ul>\n<p>参考官网安装 eslint 就可以在命令行检测 js 文件的语法错误</p>\n<h2 id=\"编辑器中使用-ESLint\"><a href=\"#编辑器中使用-ESLint\" class=\"headerlink\" title=\"编辑器中使用 ESLint\"></a>编辑器中使用 ESLint</h2><p>在实际开发中，更多是配合编辑器（Sublime Text）一起使用，在编写代码的时候使用 eslint 实时检测代码，并且提醒错误的部分，下面展示安装使用过程</p>\n<h3 id=\"1-安装ESLint-Node-模块\"><a href=\"#1-安装ESLint-Node-模块\" class=\"headerlink\" title=\"1. 安装ESLint Node 模块\"></a>1. 安装ESLint Node 模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g eslint</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-Sublime-Text-插件\"><a href=\"#2-安装-Sublime-Text-插件\" class=\"headerlink\" title=\"2. 安装 Sublime Text 插件\"></a>2. 安装 Sublime Text 插件</h3><ul>\n<li><code>SublimeLinter</code> <a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html\" target=\"_blank\" rel=\"external\">安装指南</a></li>\n<li><code>SublimeLinter-contrib-eslint</code> <a href=\"https://github.com/roadhump/SublimeLinter-eslint#plugin-installation\" target=\"_blank\" rel=\"external\">安装指南</a></li>\n</ul>\n<p><code>SublimeLinter</code> 是一个 <em>代码检测基础框架</em>，当需要具体检测方案则要安装对应的库，例如需要 eslint 监测则安装 <code>SublimeLinter-contrib-eslint</code></p>\n<h3 id=\"3-创建配置文件\"><a href=\"#3-创建配置文件\" class=\"headerlink\" title=\"3. 创建配置文件\"></a>3. 创建配置文件</h3><p>在项目根目录下创建 <code>.eslintrc</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;root&quot;: true,</div><div class=\"line\">  &quot;rules&quot;: &#123;</div><div class=\"line\">    &quot;eqeqeq&quot;: &quot;error&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中的 <code>&quot;eqeqeq&quot;: &quot;warn&quot;</code> 规则表明，如果代码中出现 <code>==</code> <code>!=</code>来比较则会出现错误提醒，建议使用 <code>===</code> <code>!==</code></p>\n<p>这个简单配置只是为了演示，具体参考 </p>\n<ul>\n<li><a href=\"http://eslint.org/docs/user-guide/configuring#using-configuration-files\" target=\"_blank\" rel=\"external\">配置指南</a></li>\n<li><a href=\"http://eslint.cn/docs/user-guide/configuring#using-configuration-files\" target=\"_blank\" rel=\"external\">配置指南（中文）</a></li>\n</ul>\n<p>这样，写代码的时候就能实时检测错误并且提醒了：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/68ef88dajw1f5j17wvklzj207802nwef.jpg\" alt=\"\"></p>\n<h2 id=\"Vue-的-ESLint\"><a href=\"#Vue-的-ESLint\" class=\"headerlink\" title=\"Vue 的 ESLint\"></a>Vue 的 ESLint</h2><h3 id=\"eslintignore-文件\"><a href=\"#eslintignore-文件\" class=\"headerlink\" title=\".eslintignore 文件\"></a>.eslintignore 文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">flow</div><div class=\"line\">dist</div><div class=\"line\">packages</div></pre></td></tr></table></figure>\n<p>表明 eslint 检测时，要忽略掉这些目录</p>\n<h3 id=\"eslintrc-文件\"><a href=\"#eslintrc-文件\" class=\"headerlink\" title=\".eslintrc 文件\"></a>.eslintrc 文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;root&quot;: true,</div><div class=\"line\">  &quot;parser&quot;: &quot;babel-eslint&quot;,</div><div class=\"line\">  &quot;extends&quot;: &quot;vue&quot;,</div><div class=\"line\">  &quot;plugins&quot;: [&quot;flow-vars&quot;],</div><div class=\"line\">  &quot;rules&quot;: &#123;</div><div class=\"line\">    &quot;flow-vars/define-flow-type&quot;: 1,</div><div class=\"line\">    &quot;flow-vars/use-flow-type&quot;: 1</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面逐个配置解释：</p>\n<ul>\n<li><code>&quot;root&quot;: true</code></li>\n</ul>\n<p>对于某个文件使用哪个配置文件，按照以下顺序查找</p>\n<ol>\n<li>在待检测文件的同一目录查找配置文件</li>\n<li>往上逐层父级目录查找，直到发现一个有 <code>&quot;root&quot;: true</code> 的</li>\n<li>使用项目根目录配置文件</li>\n<li>使用系统全局配置文件</li>\n</ol>\n<ul>\n<li><code>&quot;parser&quot;: &quot;babel-eslint&quot;</code></li>\n</ul>\n<p>使用非默认的 <code>babel-eslint</code> 作为代码解析器，同时你需要安装相应 node 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -save-dev babel-eslint</div></pre></td></tr></table></figure>\n<p>这样 eslint 就能识别 babel 语法的代码</p>\n<ul>\n<li><code>&quot;extends&quot;: &quot;vue&quot;</code></li>\n</ul>\n<p>官方或者第三方提供了一些配置模板，你只需继承则可以使用他们的模板配置，这里继承了 <code>vue</code> 意味着你需要安装 <code>eslint-config-vue</code> 这个 node 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -save-dev eslint-config-vue</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&quot;plugins&quot;: [&quot;flow-vars&quot;]</code></li>\n</ul>\n<p>让 eslint 支持 <code>Flow Script</code> 的全局注解等语法，同时你也要安装对应的 node 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -save-dev eslint-plugin-flow-vars</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&quot;rules&quot;:{xx}</code></li>\n</ul>\n<p>一些主要的配置都在 <code>&quot;extends&quot;: &quot;vue&quot;</code> 解决了，flow 插件部分的配置则在这里另外定义</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用 ESLint 保持团队编码风格统一，减少低级错误，真的很赞！</p>\n<p>另外推荐 <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\"><code>airbnb</code> 的 ES6 编码风格</a>，它有配套的 eslint 模板，很赞</p>\n<p>对于英文实在不行的，那就参考 <a href=\"https://github.com/gf-rd/es6-coding-style\" target=\"_blank\" rel=\"external\">ECMAScript6 编码规范–广发证券前端团队</a></p>\n\n\n  <!-- css -->\n  <style type=\"text/css\">\n      .center {\n          text-align: center;\n      }\n      .hidden {\n          display: none;\n      }\n    .donate_bar a.btn_donate{\n      display: inline-block;\n      width: 82px;\n      height: 82px;\n      background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      -webkit-transition: background 0s;\n      -moz-transition: background 0s;\n      -o-transition: background 0s;\n      -ms-transition: background 0s;\n      transition: background 0s;\n    }\n\n    .donate_bar a.btn_donate:hover{ background-position: 0px -82px;}\n    .donate_bar .donate_txt {\n      display: block;\n      color: #9d9d9d;\n      font: 14px/2 \"Microsoft Yahei\";\n    }\n    .donate_bar .fancybox img {\n      max-width: 300px;\n      display: inline-block;\n    }\n    .bold{ font-weight: bold; }\n  </style>\n  <!-- /css -->\n  <hr>\n\n    <!-- Donate Module -->\n    <div id=\"donate_module\">\n\n  <!-- btn_donate & tips -->\n  <div id=\"donate_board\" class=\"donate_bar center\">\n      \n    <a id=\"btn_donate\" class=\"btn_donate\" target=\"_self\" href=\"javascript:;\" title=\"Donate 打赏\"></a>\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n      \n    \n  </div>\n  <!-- /btn_donate & tips -->\n\n  <!-- donate guide -->\n  <div id=\"donate_guide\" class=\"donate_bar center hidden\">\n\n    <a class=\"fancybox\" href=\"/images/webchat.jpg\" title=\"用微信扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/webchat.jpg\" title=\"微信打赏 zhenyong\" width=\"auto\"/>\n    </a>\n        \n        &nbsp;&nbsp;\n\n    <a class=\"fancybox\" href=\"/images/alipay.jpg\" title=\"用支付宝扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/alipay.jpg\" title=\"支付宝打赏 zhenyong\" width=\"auto\"/>\n    </a>\n\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n\n  </div>\n  <!-- /donate guide -->\n\n  <!-- donate script -->\n  <script type=\"text/javascript\">\n    document.getElementById('btn_donate').onclick = function() {\n      $('#donate_board').addClass('hidden');\n      $('#donate_guide').removeClass('hidden');\n    }\n\n    function donate_on_web(){\n      $('#donate').submit();\n    }\n\n    var original_window_onload = window.onload;\n    window.onload = function () {\n      var donate_board_wdg;\n      if (original_window_onload) {\n          original_window_onload();\n      }\n      donate_board_wdg = document.getElementById('donate_board_wdg');\n      if(donate_board_wdg) {\n        donate_board_wdg.className = 'hidden';\n      }\n    }\n  </script>\n  <!-- /donate script -->\n</div>\n<!-- /Donate Module -->\n   \n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\"> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\" rel=\"external\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/05/ESLint-in-Vue/\">http://zhenyong.site/2016/07/05/ESLint-in-Vue/</a></p>\n",
        "excerpt": "<blockquote>\n<p>ESLint 一个 JavaScript 代码的静态检测工具</p>\n</blockquote>",
        "more": "<p>相比之前比较流行的 <strong>JSHint</strong>，<strong>ESLint</strong> 扩展性强、配置灵活、支持 ES6 …</p>\n<ul>\n<li><a href=\"http://eslint.org/\">ESLint 官网</a></li>\n<li><a href=\"http://eslint.cn/\">ESLint 中文</a></li>\n</ul>\n<p>参考官网安装 eslint 就可以在命令行检测 js 文件的语法错误</p>\n<h2 id=\"编辑器中使用-ESLint\"><a href=\"#编辑器中使用-ESLint\" class=\"headerlink\" title=\"编辑器中使用 ESLint\"></a>编辑器中使用 ESLint</h2><p>在实际开发中，更多是配合编辑器（Sublime Text）一起使用，在编写代码的时候使用 eslint 实时检测代码，并且提醒错误的部分，下面展示安装使用过程</p>\n<h3 id=\"1-安装ESLint-Node-模块\"><a href=\"#1-安装ESLint-Node-模块\" class=\"headerlink\" title=\"1. 安装ESLint Node 模块\"></a>1. 安装ESLint Node 模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g eslint</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-Sublime-Text-插件\"><a href=\"#2-安装-Sublime-Text-插件\" class=\"headerlink\" title=\"2. 安装 Sublime Text 插件\"></a>2. 安装 Sublime Text 插件</h3><ul>\n<li><code>SublimeLinter</code> <a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html\">安装指南</a></li>\n<li><code>SublimeLinter-contrib-eslint</code> <a href=\"https://github.com/roadhump/SublimeLinter-eslint#plugin-installation\">安装指南</a></li>\n</ul>\n<p><code>SublimeLinter</code> 是一个 <em>代码检测基础框架</em>，当需要具体检测方案则要安装对应的库，例如需要 eslint 监测则安装 <code>SublimeLinter-contrib-eslint</code></p>\n<h3 id=\"3-创建配置文件\"><a href=\"#3-创建配置文件\" class=\"headerlink\" title=\"3. 创建配置文件\"></a>3. 创建配置文件</h3><p>在项目根目录下创建 <code>.eslintrc</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;root&quot;: true,</div><div class=\"line\">  &quot;rules&quot;: &#123;</div><div class=\"line\">    &quot;eqeqeq&quot;: &quot;error&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中的 <code>&quot;eqeqeq&quot;: &quot;warn&quot;</code> 规则表明，如果代码中出现 <code>==</code> <code>!=</code>来比较则会出现错误提醒，建议使用 <code>===</code> <code>!==</code></p>\n<p>这个简单配置只是为了演示，具体参考 </p>\n<ul>\n<li><a href=\"http://eslint.org/docs/user-guide/configuring#using-configuration-files\">配置指南</a></li>\n<li><a href=\"http://eslint.cn/docs/user-guide/configuring#using-configuration-files\">配置指南（中文）</a></li>\n</ul>\n<p>这样，写代码的时候就能实时检测错误并且提醒了：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/68ef88dajw1f5j17wvklzj207802nwef.jpg\" alt=\"\"></p>\n<h2 id=\"Vue-的-ESLint\"><a href=\"#Vue-的-ESLint\" class=\"headerlink\" title=\"Vue 的 ESLint\"></a>Vue 的 ESLint</h2><h3 id=\"eslintignore-文件\"><a href=\"#eslintignore-文件\" class=\"headerlink\" title=\".eslintignore 文件\"></a>.eslintignore 文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">flow</div><div class=\"line\">dist</div><div class=\"line\">packages</div></pre></td></tr></table></figure>\n<p>表明 eslint 检测时，要忽略掉这些目录</p>\n<h3 id=\"eslintrc-文件\"><a href=\"#eslintrc-文件\" class=\"headerlink\" title=\".eslintrc 文件\"></a>.eslintrc 文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;root&quot;: true,</div><div class=\"line\">  &quot;parser&quot;: &quot;babel-eslint&quot;,</div><div class=\"line\">  &quot;extends&quot;: &quot;vue&quot;,</div><div class=\"line\">  &quot;plugins&quot;: [&quot;flow-vars&quot;],</div><div class=\"line\">  &quot;rules&quot;: &#123;</div><div class=\"line\">    &quot;flow-vars/define-flow-type&quot;: 1,</div><div class=\"line\">    &quot;flow-vars/use-flow-type&quot;: 1</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面逐个配置解释：</p>\n<ul>\n<li><code>&quot;root&quot;: true</code></li>\n</ul>\n<p>对于某个文件使用哪个配置文件，按照以下顺序查找</p>\n<ol>\n<li>在待检测文件的同一目录查找配置文件</li>\n<li>往上逐层父级目录查找，直到发现一个有 <code>&quot;root&quot;: true</code> 的</li>\n<li>使用项目根目录配置文件</li>\n<li>使用系统全局配置文件</li>\n</ol>\n<ul>\n<li><code>&quot;parser&quot;: &quot;babel-eslint&quot;</code></li>\n</ul>\n<p>使用非默认的 <code>babel-eslint</code> 作为代码解析器，同时你需要安装相应 node 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -save-dev babel-eslint</div></pre></td></tr></table></figure>\n<p>这样 eslint 就能识别 babel 语法的代码</p>\n<ul>\n<li><code>&quot;extends&quot;: &quot;vue&quot;</code></li>\n</ul>\n<p>官方或者第三方提供了一些配置模板，你只需继承则可以使用他们的模板配置，这里继承了 <code>vue</code> 意味着你需要安装 <code>eslint-config-vue</code> 这个 node 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -save-dev eslint-config-vue</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&quot;plugins&quot;: [&quot;flow-vars&quot;]</code></li>\n</ul>\n<p>让 eslint 支持 <code>Flow Script</code> 的全局注解等语法，同时你也要安装对应的 node 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -save-dev eslint-plugin-flow-vars</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&quot;rules&quot;:{xx}</code></li>\n</ul>\n<p>一些主要的配置都在 <code>&quot;extends&quot;: &quot;vue&quot;</code> 解决了，flow 插件部分的配置则在这里另外定义</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用 ESLint 保持团队编码风格统一，减少低级错误，真的很赞！</p>\n<p>另外推荐 <a href=\"https://github.com/airbnb/javascript\"><code>airbnb</code> 的 ES6 编码风格</a>，它有配套的 eslint 模板，很赞</p>\n<p>对于英文实在不行的，那就参考 <a href=\"https://github.com/gf-rd/es6-coding-style\">ECMAScript6 编码规范–广发证券前端团队</a></p>\n<!--donate1468152965244-->\n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\" /> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/05/ESLint-in-Vue/\">http://zhenyong.site/2016/07/05/ESLint-in-Vue/</a></p>",
        "path": "2016/07/05/ESLint-in-Vue/",
        "permalink": "http://zhenyong.site/2016/07/05/ESLint-in-Vue/",
        "full_source": "/Users/zhenyong/Desktop/ablog/source/_posts/ESLint-in-Vue.md",
        "asset_dir": "/Users/zhenyong/Desktop/ablog/source/_posts/ESLint-in-Vue/",
        "tags": {
            "data": [{
                "name": "vue",
                "_id": "ciqgkdanm0004j6tgagonlut3",
                "slug": "vue",
                "path": "tags/vue/",
                "permalink": "http://zhenyong.site/tags/vue/",
                "posts": {
                    "data": [{
                        "title": "Babel in Vue",
                        "date": "2016-07-04T02:36:26.000Z",
                        "thumbnail": "https://babeljs.io/images/logo.svg",
                        "_content": "\n> Babel 是一个 JavaScript 编译器\n\nVue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 `Babel` 这个工具\n\n<!--more-->\n\n## 简单例子\n\n对照 Babel 的 [官网](https://babeljs.io/)  首页的指南简单玩一下：\n\n- 安装\n\n安装 babel 命令行工具 （官网是在项目下安装，这里全局安装）\n\n```\nnpm install -g babel-cli\n```\n\n这样就能在命令行下启动 babel\n\t\n另外，我们还要告诉 babel 使用哪种转码规则，这里使用 [ES2015 preset](http://babeljs.io/docs/plugins/preset-es2015/)。在项目下创建 `.babelrc` 文件\n\n```json\n{\n  \"presets\": [\"es2015\"]\n}\n```\n然后还要安装对应转码规则包\n\n```\nnpm install --save-dev babel-preset-es2015\n```\n\n- 测试\n\n创建 js 代码文件 `test.js`：\n\n```javascript\nvar hello = () => {\n  let name = 'peter'\n  console.log('hello ' + name)\n}\n\nhello()\n```\n\n转换：\n\n```\nbabel test.js --out-file test.compiled.js\n```\n\n生成 `test.compiled.js`\n\n```\n'use strict';\n\nvar hello = function hello() {\n  var name = 'peter';\n  console.log('hello ' + name);\n};\n\nhello();\n```\n\n现在就可以在浏览器运行这段代码了\n\n更多关于 babel 或者 es6 的知识可以参考官网，或者还有下面中文网站：\n\n- [InfoQ 专栏 - 深入浅出 ES6](http://www.infoq.com/cn/es6-in-depth/)\n- [阮一峰 - ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n\n## vue 中使用\n\nvue 中在构建代码的时候结合 webpack 和 babel 相关插件使用，。。。\n\n//TODO 在 webpack 部分一起写\n\n\n\n\n\n\n",
                        "source": "_posts/Babel-in-Vue.md",
                        "raw": "---\ntitle: Babel in Vue\ndate: 2016-07-04 10:36:26\nthumbnail: https://babeljs.io/images/logo.svg\ncategories: \"tech\"\ntags: [vue]\n---\n\n> Babel 是一个 JavaScript 编译器\n\nVue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 `Babel` 这个工具\n\n<!--more-->\n\n## 简单例子\n\n对照 Babel 的 [官网](https://babeljs.io/)  首页的指南简单玩一下：\n\n- 安装\n\n安装 babel 命令行工具 （官网是在项目下安装，这里全局安装）\n\n```\nnpm install -g babel-cli\n```\n\n这样就能在命令行下启动 babel\n\t\n另外，我们还要告诉 babel 使用哪种转码规则，这里使用 [ES2015 preset](http://babeljs.io/docs/plugins/preset-es2015/)。在项目下创建 `.babelrc` 文件\n\n```json\n{\n  \"presets\": [\"es2015\"]\n}\n```\n然后还要安装对应转码规则包\n\n```\nnpm install --save-dev babel-preset-es2015\n```\n\n- 测试\n\n创建 js 代码文件 `test.js`：\n\n```javascript\nvar hello = () => {\n  let name = 'peter'\n  console.log('hello ' + name)\n}\n\nhello()\n```\n\n转换：\n\n```\nbabel test.js --out-file test.compiled.js\n```\n\n生成 `test.compiled.js`\n\n```\n'use strict';\n\nvar hello = function hello() {\n  var name = 'peter';\n  console.log('hello ' + name);\n};\n\nhello();\n```\n\n现在就可以在浏览器运行这段代码了\n\n更多关于 babel 或者 es6 的知识可以参考官网，或者还有下面中文网站：\n\n- [InfoQ 专栏 - 深入浅出 ES6](http://www.infoq.com/cn/es6-in-depth/)\n- [阮一峰 - ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n\n## vue 中使用\n\nvue 中在构建代码的时候结合 webpack 和 babel 相关插件使用，。。。\n\n//TODO 在 webpack 部分一起写\n\n\n\n\n\n\n",
                        "slug": "Babel-in-Vue",
                        "published": true,
                        "updated": "2016-07-05T08:27:04.000Z",
                        "comments": true,
                        "layout": "post",
                        "photos": [],
                        "link": "",
                        "_id": "ciqgkdan80000j6tg009su0z4",
                        "content": "<blockquote>\n<p>Babel 是一个 JavaScript 编译器</p>\n</blockquote>\n<p>Vue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 <code>Babel</code> 这个工具</p>\n<a id=\"more\"></a>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><p>对照 Babel 的 <a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">官网</a>  首页的指南简单玩一下：</p>\n<ul>\n<li>安装</li>\n</ul>\n<p>安装 babel 命令行工具 （官网是在项目下安装，这里全局安装）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g babel-cli</div></pre></td></tr></table></figure>\n<p>这样就能在命令行下启动 babel</p>\n<p>另外，我们还要告诉 babel 使用哪种转码规则，这里使用 <a href=\"http://babeljs.io/docs/plugins/preset-es2015/\" target=\"_blank\" rel=\"external\">ES2015 preset</a>。在项目下创建 <code>.babelrc</code> 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后还要安装对应转码规则包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure>\n<ul>\n<li>测试</li>\n</ul>\n<p>创建 js 代码文件 <code>test.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> name = <span class=\"string\">'peter'</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">hello()</div></pre></td></tr></table></figure>\n<p>转换：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel test.js --out-file test.compiled.js</div></pre></td></tr></table></figure>\n<p>生成 <code>test.compiled.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">var hello = function hello() &#123;</div><div class=\"line\">  var name = &apos;peter&apos;;</div><div class=\"line\">  console.log(&apos;hello &apos; + name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">hello();</div></pre></td></tr></table></figure>\n<p>现在就可以在浏览器运行这段代码了</p>\n<p>更多关于 babel 或者 es6 的知识可以参考官网，或者还有下面中文网站：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/es6-in-depth/\" target=\"_blank\" rel=\"external\">InfoQ 专栏 - 深入浅出 ES6</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">阮一峰 - ECMAScript 6 入门</a></li>\n</ul>\n<h2 id=\"vue-中使用\"><a href=\"#vue-中使用\" class=\"headerlink\" title=\"vue 中使用\"></a>vue 中使用</h2><p>vue 中在构建代码的时候结合 webpack 和 babel 相关插件使用，。。。</p>\n<p>//TODO 在 webpack 部分一起写</p>\n\n\n  <!-- css -->\n  <style type=\"text/css\">\n      .center {\n          text-align: center;\n      }\n      .hidden {\n          display: none;\n      }\n    .donate_bar a.btn_donate{\n      display: inline-block;\n      width: 82px;\n      height: 82px;\n      background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      -webkit-transition: background 0s;\n      -moz-transition: background 0s;\n      -o-transition: background 0s;\n      -ms-transition: background 0s;\n      transition: background 0s;\n    }\n\n    .donate_bar a.btn_donate:hover{ background-position: 0px -82px;}\n    .donate_bar .donate_txt {\n      display: block;\n      color: #9d9d9d;\n      font: 14px/2 \"Microsoft Yahei\";\n    }\n    .donate_bar .fancybox img {\n      max-width: 300px;\n      display: inline-block;\n    }\n    .bold{ font-weight: bold; }\n  </style>\n  <!-- /css -->\n  <hr>\n\n    <!-- Donate Module -->\n    <div id=\"donate_module\">\n\n  <!-- btn_donate & tips -->\n  <div id=\"donate_board\" class=\"donate_bar center\">\n      \n    <a id=\"btn_donate\" class=\"btn_donate\" target=\"_self\" href=\"javascript:;\" title=\"Donate 打赏\"></a>\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n      \n    \n  </div>\n  <!-- /btn_donate & tips -->\n\n  <!-- donate guide -->\n  <div id=\"donate_guide\" class=\"donate_bar center hidden\">\n\n    <a class=\"fancybox\" href=\"/images/webchat.jpg\" title=\"用微信扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/webchat.jpg\" title=\"微信打赏 zhenyong\" width=\"auto\"/>\n    </a>\n        \n        &nbsp;&nbsp;\n\n    <a class=\"fancybox\" href=\"/images/alipay.jpg\" title=\"用支付宝扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/alipay.jpg\" title=\"支付宝打赏 zhenyong\" width=\"auto\"/>\n    </a>\n\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n\n  </div>\n  <!-- /donate guide -->\n\n  <!-- donate script -->\n  <script type=\"text/javascript\">\n    document.getElementById('btn_donate').onclick = function() {\n      $('#donate_board').addClass('hidden');\n      $('#donate_guide').removeClass('hidden');\n    }\n\n    function donate_on_web(){\n      $('#donate').submit();\n    }\n\n    var original_window_onload = window.onload;\n    window.onload = function () {\n      var donate_board_wdg;\n      if (original_window_onload) {\n          original_window_onload();\n      }\n      donate_board_wdg = document.getElementById('donate_board_wdg');\n      if(donate_board_wdg) {\n        donate_board_wdg.className = 'hidden';\n      }\n    }\n  </script>\n  <!-- /donate script -->\n</div>\n<!-- /Donate Module -->\n   \n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\"> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\" rel=\"external\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/04/Babel-in-Vue/\">http://zhenyong.site/2016/07/04/Babel-in-Vue/</a></p>\n",
                        "excerpt": "<blockquote>\n<p>Babel 是一个 JavaScript 编译器</p>\n</blockquote>\n<p>Vue 的所有模块代码都是用了 ES6 的语法，可是大多数浏览器对 ES6 支持不够，所以需要先把源码（ES6）转化为浏览器能够识别执行的代码（ES5），而这个过程就需要用到 <code>Babel</code> 这个工具</p>",
                        "more": "<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><p>对照 Babel 的 <a href=\"https://babeljs.io/\">官网</a>  首页的指南简单玩一下：</p>\n<ul>\n<li>安装</li>\n</ul>\n<p>安装 babel 命令行工具 （官网是在项目下安装，这里全局安装）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g babel-cli</div></pre></td></tr></table></figure>\n<p>这样就能在命令行下启动 babel</p>\n<p>另外，我们还要告诉 babel 使用哪种转码规则，这里使用 <a href=\"http://babeljs.io/docs/plugins/preset-es2015/\">ES2015 preset</a>。在项目下创建 <code>.babelrc</code> 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后还要安装对应转码规则包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure>\n<ul>\n<li>测试</li>\n</ul>\n<p>创建 js 代码文件 <code>test.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> name = <span class=\"string\">'peter'</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">hello()</div></pre></td></tr></table></figure>\n<p>转换：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel test.js --out-file test.compiled.js</div></pre></td></tr></table></figure>\n<p>生成 <code>test.compiled.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">var hello = function hello() &#123;</div><div class=\"line\">  var name = &apos;peter&apos;;</div><div class=\"line\">  console.log(&apos;hello &apos; + name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">hello();</div></pre></td></tr></table></figure>\n<p>现在就可以在浏览器运行这段代码了</p>\n<p>更多关于 babel 或者 es6 的知识可以参考官网，或者还有下面中文网站：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/es6-in-depth/\">InfoQ 专栏 - 深入浅出 ES6</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\">阮一峰 - ECMAScript 6 入门</a></li>\n</ul>\n<h2 id=\"vue-中使用\"><a href=\"#vue-中使用\" class=\"headerlink\" title=\"vue 中使用\"></a>vue 中使用</h2><p>vue 中在构建代码的时候结合 webpack 和 babel 相关插件使用，。。。</p>\n<p>//TODO 在 webpack 部分一起写</p>\n<!--donate1468152965244-->\n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\" /> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/04/Babel-in-Vue/\">http://zhenyong.site/2016/07/04/Babel-in-Vue/</a></p>",
                        "path": "2016/07/04/Babel-in-Vue/",
                        "permalink": "http://zhenyong.site/2016/07/04/Babel-in-Vue/",
                        "full_source": "/Users/zhenyong/Desktop/ablog/source/_posts/Babel-in-Vue.md",
                        "asset_dir": "/Users/zhenyong/Desktop/ablog/source/_posts/Babel-in-Vue/",
                        "tags": {
                            "data": [{
                                "name": "vue",
                                "_id": "ciqgkdanm0004j6tgagonlut3",
                                "slug": "vue",
                                "path": "tags/vue/",
                                "permalink": "http://zhenyong.site/tags/vue/",
                                "posts": {
                                    "data": [null, null, {
                                        "title": "EditorConfig in Vue",
                                        "date": "2016-07-03T09:23:26.000Z",
                                        "thumbnail": "http://editorconfig.org/logo.png",
                                        "_content": "\n> EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格\n\n<!--more-->\n\n某些编辑器使用 EditorConfig 则需要安装对应的插件，Sublime Text 的话就安装 EditorConfig \n\n源码中的配置文件 `.editorconfig`\n\n```\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n```\n\n解释一下这份配置的意思:\n\n- `root = true`\n\n当打开一个文件时，EditorConfig 插件在文件的目录和其每一级父目录查找 .editorconfig 文件，直到有一个配置文件包含 root = true\n\nEditorConfig 配置文件从上往下读取，并且路径最近的文件最后被读取，匹配到的配置按照读取顺序应用在代码上，最接近代码文件的属性优先级最高\n\n- `[*]`\n表示对所有文件文件使用 editorconfig，也可以指定某种文件格式\n\n- `charset = utf-8`\n\n设置文件编码格式为 utf-8\n\n- `indent_style = space`\n\n所有的缩进使用空格，包括 tab 键产生的空白\n\n- `indent_size = 2`\n\n设置整数表示规定每级缩进的列数\n\n- `end_of_line = lf`\n\n统一设置换行符，不同操作系统默认使用不同的换行符\n\nwindows 是 crlf，即 `\\r\\n`\n\nunix 则是 lf ，即 `\\n`\n\n- `insert_final_newline = true`\n\n文件都以一个空白行结尾\n\n- `trim_trailing_whitespace = true`\n\n除去换行行首的任意空白字符\n\n---\n参考：\n\n- [官网](http://editorconfig.org/)\n- [EditorConfig介绍（译）](http://www.alloyteam.com/2014/12/editor-config/)\n\n\n",
                                        "source": "_posts/EditorConfig-in-Vue.md",
                                        "raw": "---\ntitle: EditorConfig in Vue\ndate: 2016-07-03 17:23:26\nthumbnail: http://editorconfig.org/logo.png\ncategories: tech\ntags: [vue]\n---\n\n> EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格\n\n<!--more-->\n\n某些编辑器使用 EditorConfig 则需要安装对应的插件，Sublime Text 的话就安装 EditorConfig \n\n源码中的配置文件 `.editorconfig`\n\n```\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n```\n\n解释一下这份配置的意思:\n\n- `root = true`\n\n当打开一个文件时，EditorConfig 插件在文件的目录和其每一级父目录查找 .editorconfig 文件，直到有一个配置文件包含 root = true\n\nEditorConfig 配置文件从上往下读取，并且路径最近的文件最后被读取，匹配到的配置按照读取顺序应用在代码上，最接近代码文件的属性优先级最高\n\n- `[*]`\n表示对所有文件文件使用 editorconfig，也可以指定某种文件格式\n\n- `charset = utf-8`\n\n设置文件编码格式为 utf-8\n\n- `indent_style = space`\n\n所有的缩进使用空格，包括 tab 键产生的空白\n\n- `indent_size = 2`\n\n设置整数表示规定每级缩进的列数\n\n- `end_of_line = lf`\n\n统一设置换行符，不同操作系统默认使用不同的换行符\n\nwindows 是 crlf，即 `\\r\\n`\n\nunix 则是 lf ，即 `\\n`\n\n- `insert_final_newline = true`\n\n文件都以一个空白行结尾\n\n- `trim_trailing_whitespace = true`\n\n除去换行行首的任意空白字符\n\n---\n参考：\n\n- [官网](http://editorconfig.org/)\n- [EditorConfig介绍（译）](http://www.alloyteam.com/2014/12/editor-config/)\n\n\n",
                                        "slug": "EditorConfig-in-Vue",
                                        "published": true,
                                        "updated": "2016-07-05T07:14:16.000Z",
                                        "comments": true,
                                        "layout": "post",
                                        "photos": [],
                                        "link": "",
                                        "_id": "ciqgkdanu0006j6tga4le5j9b",
                                        "content": "<blockquote>\n<p>EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>某些编辑器使用 EditorConfig 则需要安装对应的插件，Sublime Text 的话就安装 EditorConfig </p>\n<p>源码中的配置文件 <code>.editorconfig</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">root = true</div><div class=\"line\"></div><div class=\"line\">[*]</div><div class=\"line\">charset = utf-8</div><div class=\"line\">indent_style = space</div><div class=\"line\">indent_size = 2</div><div class=\"line\">end_of_line = lf</div><div class=\"line\">insert_final_newline = true</div><div class=\"line\">trim_trailing_whitespace = true</div></pre></td></tr></table></figure>\n<p>解释一下这份配置的意思:</p>\n<ul>\n<li><code>root = true</code></li>\n</ul>\n<p>当打开一个文件时，EditorConfig 插件在文件的目录和其每一级父目录查找 .editorconfig 文件，直到有一个配置文件包含 root = true</p>\n<p>EditorConfig 配置文件从上往下读取，并且路径最近的文件最后被读取，匹配到的配置按照读取顺序应用在代码上，最接近代码文件的属性优先级最高</p>\n<ul>\n<li><p><code>[*]</code><br>表示对所有文件文件使用 editorconfig，也可以指定某种文件格式</p>\n</li>\n<li><p><code>charset = utf-8</code></p>\n</li>\n</ul>\n<p>设置文件编码格式为 utf-8</p>\n<ul>\n<li><code>indent_style = space</code></li>\n</ul>\n<p>所有的缩进使用空格，包括 tab 键产生的空白</p>\n<ul>\n<li><code>indent_size = 2</code></li>\n</ul>\n<p>设置整数表示规定每级缩进的列数</p>\n<ul>\n<li><code>end_of_line = lf</code></li>\n</ul>\n<p>统一设置换行符，不同操作系统默认使用不同的换行符</p>\n<p>windows 是 crlf，即 <code>\\r\\n</code></p>\n<p>unix 则是 lf ，即 <code>\\n</code></p>\n<ul>\n<li><code>insert_final_newline = true</code></li>\n</ul>\n<p>文件都以一个空白行结尾</p>\n<ul>\n<li><code>trim_trailing_whitespace = true</code></li>\n</ul>\n<p>除去换行行首的任意空白字符</p>\n<hr>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://editorconfig.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://www.alloyteam.com/2014/12/editor-config/\" target=\"_blank\" rel=\"external\">EditorConfig介绍（译）</a></li>\n</ul>\n\n\n  <!-- css -->\n  <style type=\"text/css\">\n      .center {\n          text-align: center;\n      }\n      .hidden {\n          display: none;\n      }\n    .donate_bar a.btn_donate{\n      display: inline-block;\n      width: 82px;\n      height: 82px;\n      background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      -webkit-transition: background 0s;\n      -moz-transition: background 0s;\n      -o-transition: background 0s;\n      -ms-transition: background 0s;\n      transition: background 0s;\n    }\n\n    .donate_bar a.btn_donate:hover{ background-position: 0px -82px;}\n    .donate_bar .donate_txt {\n      display: block;\n      color: #9d9d9d;\n      font: 14px/2 \"Microsoft Yahei\";\n    }\n    .donate_bar .fancybox img {\n      max-width: 300px;\n      display: inline-block;\n    }\n    .bold{ font-weight: bold; }\n  </style>\n  <!-- /css -->\n  <hr>\n\n    <!-- Donate Module -->\n    <div id=\"donate_module\">\n\n  <!-- btn_donate & tips -->\n  <div id=\"donate_board\" class=\"donate_bar center\">\n      \n    <a id=\"btn_donate\" class=\"btn_donate\" target=\"_self\" href=\"javascript:;\" title=\"Donate 打赏\"></a>\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n      \n    \n  </div>\n  <!-- /btn_donate & tips -->\n\n  <!-- donate guide -->\n  <div id=\"donate_guide\" class=\"donate_bar center hidden\">\n\n    <a class=\"fancybox\" href=\"/images/webchat.jpg\" title=\"用微信扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/webchat.jpg\" title=\"微信打赏 zhenyong\" width=\"auto\"/>\n    </a>\n        \n        &nbsp;&nbsp;\n\n    <a class=\"fancybox\" href=\"/images/alipay.jpg\" title=\"用支付宝扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/alipay.jpg\" title=\"支付宝打赏 zhenyong\" width=\"auto\"/>\n    </a>\n\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n\n  </div>\n  <!-- /donate guide -->\n\n  <!-- donate script -->\n  <script type=\"text/javascript\">\n    document.getElementById('btn_donate').onclick = function() {\n      $('#donate_board').addClass('hidden');\n      $('#donate_guide').removeClass('hidden');\n    }\n\n    function donate_on_web(){\n      $('#donate').submit();\n    }\n\n    var original_window_onload = window.onload;\n    window.onload = function () {\n      var donate_board_wdg;\n      if (original_window_onload) {\n          original_window_onload();\n      }\n      donate_board_wdg = document.getElementById('donate_board_wdg');\n      if(donate_board_wdg) {\n        donate_board_wdg.className = 'hidden';\n      }\n    }\n  </script>\n  <!-- /donate script -->\n</div>\n<!-- /Donate Module -->\n   \n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\"> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\" rel=\"external\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/\">http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/</a></p>\n",
                                        "excerpt": "<blockquote>\n<p>EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格</p>\n</blockquote>",
                                        "more": "<p>某些编辑器使用 EditorConfig 则需要安装对应的插件，Sublime Text 的话就安装 EditorConfig </p>\n<p>源码中的配置文件 <code>.editorconfig</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">root = true</div><div class=\"line\"></div><div class=\"line\">[*]</div><div class=\"line\">charset = utf-8</div><div class=\"line\">indent_style = space</div><div class=\"line\">indent_size = 2</div><div class=\"line\">end_of_line = lf</div><div class=\"line\">insert_final_newline = true</div><div class=\"line\">trim_trailing_whitespace = true</div></pre></td></tr></table></figure>\n<p>解释一下这份配置的意思:</p>\n<ul>\n<li><code>root = true</code></li>\n</ul>\n<p>当打开一个文件时，EditorConfig 插件在文件的目录和其每一级父目录查找 .editorconfig 文件，直到有一个配置文件包含 root = true</p>\n<p>EditorConfig 配置文件从上往下读取，并且路径最近的文件最后被读取，匹配到的配置按照读取顺序应用在代码上，最接近代码文件的属性优先级最高</p>\n<ul>\n<li><p><code>[*]</code><br>表示对所有文件文件使用 editorconfig，也可以指定某种文件格式</p>\n</li>\n<li><p><code>charset = utf-8</code></p>\n</li>\n</ul>\n<p>设置文件编码格式为 utf-8</p>\n<ul>\n<li><code>indent_style = space</code></li>\n</ul>\n<p>所有的缩进使用空格，包括 tab 键产生的空白</p>\n<ul>\n<li><code>indent_size = 2</code></li>\n</ul>\n<p>设置整数表示规定每级缩进的列数</p>\n<ul>\n<li><code>end_of_line = lf</code></li>\n</ul>\n<p>统一设置换行符，不同操作系统默认使用不同的换行符</p>\n<p>windows 是 crlf，即 <code>\\r\\n</code></p>\n<p>unix 则是 lf ，即 <code>\\n</code></p>\n<ul>\n<li><code>insert_final_newline = true</code></li>\n</ul>\n<p>文件都以一个空白行结尾</p>\n<ul>\n<li><code>trim_trailing_whitespace = true</code></li>\n</ul>\n<p>除去换行行首的任意空白字符</p>\n<hr>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://editorconfig.org/\">官网</a></li>\n<li><a href=\"http://www.alloyteam.com/2014/12/editor-config/\">EditorConfig介绍（译）</a></li>\n</ul>\n<!--donate1468152965244-->\n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\" /> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/\">http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/</a></p>",
                                        "path": "2016/07/03/EditorConfig-in-Vue/",
                                        "permalink": "http://zhenyong.site/2016/07/03/EditorConfig-in-Vue/",
                                        "full_source": "/Users/zhenyong/Desktop/ablog/source/_posts/EditorConfig-in-Vue.md",
                                        "asset_dir": "/Users/zhenyong/Desktop/ablog/source/_posts/EditorConfig-in-Vue/",
                                        "tags": {
                                            "data": [{
                                                "name": "vue",
                                                "_id": "ciqgkdanm0004j6tgagonlut3",
                                                "slug": "vue",
                                                "path": "tags/vue/",
                                                "permalink": "http://zhenyong.site/tags/vue/",
                                                "posts": {
                                                    "data": [null, null, null, {
                                                        "title": "Vue 源码工具链介绍",
                                                        "date": "2016-07-03T08:55:15.000Z",
                                                        "thumbnail": "https://vuejs.org/images/logo.png",
                                                        "_content": "\n介绍 Vue 源码中使用到的工具，例如编辑器插件、打包工具、测试工具等等\n\n有部分工具我平时也在用，为了系统地介绍，我也当做小白去学习\n\n本人和小右平常使用的编辑器都是 [Sublime Text 3](https://www.sublimetext.com/3)\n\n- [EditorConfig]()\n\n",
                                                        "source": "_posts/Vue-源码工具链介绍.md",
                                                        "raw": "---\ntitle: Vue 源码工具链介绍\ndate: 2016-07-03 16:55:15\nthumbnail: https://vuejs.org/images/logo.png\ncategories: tech\ntags: [vue]\n---\n\n介绍 Vue 源码中使用到的工具，例如编辑器插件、打包工具、测试工具等等\n\n有部分工具我平时也在用，为了系统地介绍，我也当做小白去学习\n\n本人和小右平常使用的编辑器都是 [Sublime Text 3](https://www.sublimetext.com/3)\n\n- [EditorConfig]()\n\n",
                                                        "slug": "Vue-源码工具链介绍",
                                                        "published": true,
                                                        "updated": "2016-07-05T07:14:12.000Z",
                                                        "comments": true,
                                                        "layout": "post",
                                                        "photos": [],
                                                        "link": "",
                                                        "_id": "ciqgkdanz0009j6tgfgp6ybd9",
                                                        "content": "<p>介绍 Vue 源码中使用到的工具，例如编辑器插件、打包工具、测试工具等等</p>\n<p>有部分工具我平时也在用，为了系统地介绍，我也当做小白去学习</p>\n<p>本人和小右平常使用的编辑器都是 <a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">Sublime Text 3</a></p>\n<ul>\n<li><a href=\"\">EditorConfig</a></li>\n</ul>\n\n\n  <!-- css -->\n  <style type=\"text/css\">\n      .center {\n          text-align: center;\n      }\n      .hidden {\n          display: none;\n      }\n    .donate_bar a.btn_donate{\n      display: inline-block;\n      width: 82px;\n      height: 82px;\n      background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      _background: url(\"http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif\") no-repeat;\n      -webkit-transition: background 0s;\n      -moz-transition: background 0s;\n      -o-transition: background 0s;\n      -ms-transition: background 0s;\n      transition: background 0s;\n    }\n\n    .donate_bar a.btn_donate:hover{ background-position: 0px -82px;}\n    .donate_bar .donate_txt {\n      display: block;\n      color: #9d9d9d;\n      font: 14px/2 \"Microsoft Yahei\";\n    }\n    .donate_bar .fancybox img {\n      max-width: 300px;\n      display: inline-block;\n    }\n    .bold{ font-weight: bold; }\n  </style>\n  <!-- /css -->\n  <hr>\n\n    <!-- Donate Module -->\n    <div id=\"donate_module\">\n\n  <!-- btn_donate & tips -->\n  <div id=\"donate_board\" class=\"donate_bar center\">\n      \n    <a id=\"btn_donate\" class=\"btn_donate\" target=\"_self\" href=\"javascript:;\" title=\"Donate 打赏\"></a>\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n      \n    \n  </div>\n  <!-- /btn_donate & tips -->\n\n  <!-- donate guide -->\n  <div id=\"donate_guide\" class=\"donate_bar center hidden\">\n\n    <a class=\"fancybox\" href=\"/images/webchat.jpg\" title=\"用微信扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/webchat.jpg\" title=\"微信打赏 zhenyong\" width=\"auto\"/>\n    </a>\n        \n        &nbsp;&nbsp;\n\n    <a class=\"fancybox\" href=\"/images/alipay.jpg\" title=\"用支付宝扫一扫\" rel=\"donoate-fancy-group\">\n      <img src=\"/images/alipay.jpg\" title=\"支付宝打赏 zhenyong\" width=\"auto\"/>\n    </a>\n\n    <span class=\"donate_txt\">\n      求鼓励，求支持！\n    </span>\n\n  </div>\n  <!-- /donate guide -->\n\n  <!-- donate script -->\n  <script type=\"text/javascript\">\n    document.getElementById('btn_donate').onclick = function() {\n      $('#donate_board').addClass('hidden');\n      $('#donate_guide').removeClass('hidden');\n    }\n\n    function donate_on_web(){\n      $('#donate').submit();\n    }\n\n    var original_window_onload = window.onload;\n    window.onload = function () {\n      var donate_board_wdg;\n      if (original_window_onload) {\n          original_window_onload();\n      }\n      donate_board_wdg = document.getElementById('donate_board_wdg');\n      if(donate_board_wdg) {\n        donate_board_wdg.className = 'hidden';\n      }\n    }\n  </script>\n  <!-- /donate script -->\n</div>\n<!-- /Donate Module -->\n   \n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\"> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\" rel=\"external\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/\">http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/</a></p>\n",
                                                        "excerpt": "",
                                                        "more": "<p>介绍 Vue 源码中使用到的工具，例如编辑器插件、打包工具、测试工具等等</p>\n<p>有部分工具我平时也在用，为了系统地介绍，我也当做小白去学习</p>\n<p>本人和小右平常使用的编辑器都是 <a href=\"https://www.sublimetext.com/3\">Sublime Text 3</a></p>\n<ul>\n<li><a href=\"\">EditorConfig</a></li>\n</ul>\n<!--donate1468152965244-->\n<hr>\n<p><strong>版权声明</strong></p>\n<p>本作品采用 <img style=\"display:inline-block;vertical-align: top;\" src=\"http://ww1.sinaimg.cn/large/68ef88dajw1f5j9v8t5eqj202g00vwe9.jpg\" /> <a href=\"https://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a> 进行许可</p>\n<p>欢迎转载，但转载请注明来自 <a href=\"zhenyong.github.io\">zhenyong.github.io</a>，并保持转载后文章内容的完整</p>\n<p>本人保留所有版权相关权利</p>\n<p>本文链接：<a href=\"http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/\">http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/</a></p>\n",
                                                        "path": "2016/07/03/Vue-源码工具链介绍/",
                                                        "permalink": "http://zhenyong.site/2016/07/03/Vue-源码工具链介绍/",
                                                        "full_source": "/Users/zhenyong/Desktop/ablog/source/_posts/Vue-源码工具链介绍.md",
                                                        "asset_dir": "/Users/zhenyong/Desktop/ablog/source/_posts/Vue-源码工具链介绍/",
                                                        "tags": {
                                                            "data": [{
                                                                "name": "vue",
                                                                "_id": "ciqgkdanm0004j6tgagonlut3",
                                                                "slug": "vue",
                                                                "path": "tags/vue/",
                                                                "permalink": "http://zhenyong.site/tags/vue/",
                                                                "posts": {
                                                                    "data": [null, null, null, null],
                                                                    "length": 4
                                                                },
                                                                "length": 4
                                                            }],
                                                            "length": 1
                                                        },
                                                        "categories": {
                                                            "data": [{
                                                                "name": "tech",
                                                                "_id": "ciqgkdant0005j6tg4a5df5gk",
                                                                "slug": "tech",
                                                                "path": "categories/tech/",
                                                                "permalink": "http://zhenyong.site/categories/tech/",
                                                                "posts": {
                                                                    "data": [null, null, null, null],
                                                                    "length": 4
                                                                },
                                                                "length": 4
                                                            }],
                                                            "length": 1
                                                        },
                                                        "__post": true
                                                    }],
                                                    "length": 4
                                                },
                                                "length": 4
                                            }],
                                            "length": 1
                                        },
                                        "categories": {
                                            "data": [{
                                                "name": "tech",
                                                "_id": "ciqgkdant0005j6tg4a5df5gk",
                                                "slug": "tech",
                                                "path": "categories/tech/",
                                                "permalink": "http://zhenyong.site/categories/tech/",
                                                "posts": {
                                                    "data": [null, null, null, null],
                                                    "length": 4
                                                },
                                                "length": 4
                                            }],
                                            "length": 1
                                        },
                                        "__post": true
                                    }, null],
                                    "length": 4
                                },
                                "length": 4
                            }],
                            "length": 1
                        },
                        "categories": {
                            "data": [{
                                "name": "tech",
                                "_id": "ciqgkdant0005j6tg4a5df5gk",
                                "slug": "tech",
                                "path": "categories/tech/",
                                "permalink": "http://zhenyong.site/categories/tech/",
                                "posts": {
                                    "data": [null, null, null, null],
                                    "length": 4
                                },
                                "length": 4
                            }],
                            "length": 1
                        },
                        "__post": true
                    }, null, null, null],
                    "length": 4
                },
                "length": 4
            }],
            "length": 1
        },
        "categories": {
            "data": [{
                "name": "tech",
                "_id": "ciqgkdant0005j6tg4a5df5gk",
                "slug": "tech",
                "path": "categories/tech/",
                "permalink": "http://zhenyong.site/categories/tech/",
                "posts": {
                    "data": [null, null, null, null],
                    "length": 4
                },
                "length": 4
            }],
            "length": 1
        },
        "__post": true
    },
    "__post": true
}, null, null, null, null, {
    "title": "Tags",
    "layout": "tags",
    "_content": "",
    "source": "tags/index.md",
    "raw": "title: \"Tags\"\nlayout: \"tags\"\n---\n",
    "date": "2016-07-05T01:59:42.000Z",
    "updated": "2016-07-05T01:59:42.000Z",
    "path": "tags/index.html",
    "comments": true,
    "_id": "ciqgkdanl0003j6tglrjipxio",
    "content": "<hr>\n<p>本文链接：<a href=\"http://zhenyong.site/tags/index.html\">http://zhenyong.site/tags/index.html</a></p>\n",
    "excerpt": "",
    "more": "<hr>\n<p>本文链接：<a href=\"http://zhenyong.site/tags/index.html\">http://zhenyong.site/tags/index.html</a></p>\n",
    "permalink": "http://zhenyong.site/tags/index.html",
    "full_source": "/Users/zhenyong/Desktop/ablog/source/tags/index.md",
    "__page": true
}, {
    "title": "Categories",
    "layout": "categories",
    "_content": "",
    "source": "categories/index.md",
    "raw": "title: \"Categories\"\nlayout: \"categories\"\n---\n",
    "date": "2016-07-05T01:59:10.000Z",
    "updated": "2016-07-05T01:59:10.000Z",
    "path": "categories/index.html",
    "comments": true,
    "_id": "ciqgkdang0001j6tge06nb744",
    "content": "<hr>\n<p>本文链接：<a href=\"http://zhenyong.site/categories/index.html\">http://zhenyong.site/categories/index.html</a></p>\n",
    "excerpt": "",
    "more": "<hr>\n<p>本文链接：<a href=\"http://zhenyong.site/categories/index.html\">http://zhenyong.site/categories/index.html</a></p>\n",
    "permalink": "http://zhenyong.site/categories/index.html",
    "full_source": "/Users/zhenyong/Desktop/ablog/source/categories/index.md",
    "__page": true
}]